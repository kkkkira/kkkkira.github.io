{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/bg/hs.jpg","path":"img/bg/hs.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/IMG_0048.jpg","path":"img/bg/IMG_0048.jpg","modified":0,"renderable":0},{"_id":"source/img/logo/1.svg","path":"img/logo/1.svg","modified":0,"renderable":0},{"_id":"source/img/logo/2.svg","path":"img/logo/2.svg","modified":0,"renderable":0},{"_id":"source/img/logo/3.svg","path":"img/logo/3.svg","modified":0,"renderable":0},{"_id":"source/img/logo/4.svg","path":"img/logo/4.svg","modified":0,"renderable":0},{"_id":"source/img/logo/5.svg","path":"img/logo/5.svg","modified":0,"renderable":0},{"_id":"source/img/logo/6.svg","path":"img/logo/6.svg","modified":0,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"f123433aceb7db7d731ffb292fca0cd29c93b335","modified":1672378813870},{"_id":"source/_posts/hello.md","hash":"aacafa6034f0ee00136575303cb06a6e3c88a430","modified":1675501909268},{"_id":"source/css/custom.css","hash":"84e983991f440cd2a282f11f88a2c395bfd89f81","modified":1677593004128},{"_id":"source/_data/languages/zh-CN.yml","hash":"c599e877fed87314ea11506e4baae172174ec7d0","modified":1672378813869},{"_id":"source/.DS_Store","hash":"01430583e3ff27df117bfcaee6b47641af99d6ea","modified":1677593924491},{"_id":"source/img/bg/IMG_0048.jpg","hash":"1c382f0021da5b56deb1cc97c5b5f27c19bb4751","modified":1672378813872},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672379142345},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1672379142352},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1672379142291},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1672379142291},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1672379142354},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1672379142194},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1672379142354},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1672379142355},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1672379142354},{"_id":"node_modules/hexo-theme-fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1672379142355},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1672379142355},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1672379142357},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1672379142357},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1672379142353},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1672379142197},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1672379142197},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1672379142199},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1672379142200},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1672379142201},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1672379142211},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1672379142211},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1672379142212},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1672379142217},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1672379142218},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1672379142221},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1672379142223},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1672379142198},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1672379142200},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1672379142200},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1672379142202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1672379142203},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1672379142205},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1672379142208},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1672379142209},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1672379142218},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1672379142219},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1672379142212},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1672379142219},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1672379142283},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1672379142270},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1672379142286},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1672379142288},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1672379142270},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1672379142269},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1672379142276},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1672379142270},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1672379142284},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1672379142287},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1672379142289},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1672379142290},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1672379142290},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1672379142290},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1672379142285},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1672379142288},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1672379142287},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1672379142267},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1672379142289},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1672379142290},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1672379142265},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1672379142265},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1672379142272},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1672379142284},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1672379142287},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1672379142287},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1672379142310},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1672379142309},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1672379142196},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1672379142291},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1672379142330},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1672379142294},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1672379142266},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1672379142264},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1672379142294},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1672379142263},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1672379142270},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1672379142275},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1672379142286},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1672379142288},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1672379142290},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1672379142284},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1672379142352},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1672379142201},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1672379142203},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1672379142204},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1672379142205},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1672379142207},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1672379142212},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1672379142219},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1672379142261},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1672379142261},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1672379142262},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1672379142262},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1672379142199},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1672379142220},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1672379142199},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1672379142215},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1672379142198},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1672379142198},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1672379142202},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1672379142204},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1672379142204},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1672379142210},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1672379142213},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1672379142214},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1672379142216},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1672379142261},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1672379142200},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1672379142214},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1672379142203},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1672379142215},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1672379142219},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1672379142220},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1672379142260},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1672379142268},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1672379142270},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1672379142272},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1672379142273},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1672379142283},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1672379142284},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1672379142286},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1672379142297},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1672379142298},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1672379142338},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1672379142299},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1672379142295},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1672379142299},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1672379142304},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1672379142320},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1672379142316},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1672379142301},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1672379142297},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1672379142302},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1672379142303},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1672379142315},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1672379142330},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1672379142306},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1672379142309},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1672379142330},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1672379142338},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1672379142339},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1672379142350},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1672379142300},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1672379142297},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1672379142306},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1672379142303},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1672379142307},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1672379142307},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1672379142308},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1672379142334},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1672379142295},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1672379142338},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1672379142335},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1672379142340},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1672379142340},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1672379142351},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1672379142342},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1672379142335},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1672379142293},{"_id":"source/img/bg/hs.jpg","hash":"bda2cc0e1a2fd0c14fbd5809ddb5760963da22db","modified":1672378813920},{"_id":"public/css/custom.css","hash":"746184402aedd09fc31bcba93eab4b236e595f75","modified":1675513991242},{"_id":"public/local-search.xml","hash":"eb9f52323451e11e289f3d6460ed03d35c4e0dc9","modified":1675513991242},{"_id":"public/about/index.html","hash":"245cc4833780e829cc456d54da10aaf5d065c9e1","modified":1675513991242},{"_id":"public/2022/12/29/hello/index.html","hash":"71ed877e8c3406b32ec09d93b78f8ede28de51ff","modified":1675513991242},{"_id":"public/index.html","hash":"c6beaf4ac2e2794d74a0363c5ffc2e7769423034","modified":1675513991242},{"_id":"public/archives/2022/index.html","hash":"28b7733af23fc3450a98236f713d85ea3fc1860a","modified":1675513991242},{"_id":"public/archives/index.html","hash":"814e17a5f59b4d52bf1d3d642c7f2600bd19dbe0","modified":1675513991242},{"_id":"public/archives/2022/12/index.html","hash":"8dd9609a58b3038437f77ac907cec7996f60373e","modified":1675513991242},{"_id":"public/404.html","hash":"249fede440b38bf801abcac393ee44cd25969ac5","modified":1675513991242},{"_id":"public/tags/index.html","hash":"345df62095c4fd2f0d9c357ef15eafc1b7699b25","modified":1675513991242},{"_id":"public/categories/index.html","hash":"7302ca774a0f2c1affb0a2297cd6afd5e6dd4db6","modified":1675513991242},{"_id":"public/links/index.html","hash":"33d207db33884ae6bb282fe409374c0ea555ccfb","modified":1675513991242},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1675513991242},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1675513991242},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1675513991242},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1675513991242},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1675513991242},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1675513991242},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1675513991242},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1675513991242},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1675513991242},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1675513991242},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1675513991242},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1675513991242},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1675513991242},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1675513991242},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1675513991242},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1675513991242},{"_id":"public/css/main.css","hash":"4d4a763ef5e9ab2602c46e812d846bba7a277757","modified":1675513991242},{"_id":"public/img/bg/IMG_0048.jpg","hash":"1c382f0021da5b56deb1cc97c5b5f27c19bb4751","modified":1675513991242},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1675513991242},{"_id":"public/img/bg/hs.jpg","hash":"bda2cc0e1a2fd0c14fbd5809ddb5760963da22db","modified":1675513991242},{"_id":"source/_posts/this指针.md","hash":"fdd08363133fd5cb4467b8495b34414d03ba13d1","modified":1677593466990},{"_id":"source/_posts/this指针/5.png","hash":"fd61bf1fd530634f075d34a429a8e05d952ba73e","modified":1677353488000},{"_id":"source/img/post/this.png","hash":"978eac1516d8c861ed8d362caf5531da70118f9a","modified":1677591497964},{"_id":"source/_posts/this指针/1.png","hash":"010df365706510909bc5fb151f2c2a5d1d5eadff","modified":1677353488000},{"_id":"source/_posts/this指针/4.png","hash":"3f45edec62ac2357acd4449f12d6fd0c40b839ba","modified":1677353488000},{"_id":"source/_posts/this指针/2.png","hash":"d2547baea38a606ff1c2a1f027f1ef5df76ca4da","modified":1677353488000},{"_id":"source/_posts/this指针/6.png","hash":"f7a6eaea90c69225926c221bfc10ff595f8febfc","modified":1677502534115},{"_id":"source/_posts/this指针/8.png","hash":"726563949c0a2fc722403013084db32aba631183","modified":1677582808292},{"_id":"source/_posts/this指针/3.png","hash":"a11c9c33db0dde6e4fafe2ff59db71b414992f55","modified":1677353488000},{"_id":"source/_posts/this指针/7.png","hash":"e1feae3c2bc356cf78a8bb53d15c07fca193caaf","modified":1677580951815},{"_id":"source/_posts/this指针/this.png","hash":"8ad4f733e1b6a5e729e7f09e51bd46f591754d21","modified":1677353488000},{"_id":"source/_posts/BFC.md","hash":"6f92ca1550b2e492895ed9bb0e7679f88148441e","modified":1677593358021},{"_id":"source/_posts/浏览器同源策略.md","hash":"6622ca37fb10d12c88599af233f005d37abf68d3","modified":1677593883523},{"_id":"source/_posts/BFC/3.png","hash":"8fb6222d1feea83b6ab412344751ab25a044f570","modified":1677353610000},{"_id":"source/img/logo/1.svg","hash":"bf2a45c4f41c35d941f5eb30940e250299e08660","modified":1677593817000},{"_id":"source/img/logo/2.svg","hash":"88f5a0e6e613c12943d698e7492c3d6ed61b98b0","modified":1677593828000},{"_id":"source/img/logo/3.svg","hash":"937b51c28f5ed6fa47857bb65bb6a5a0314b6c4f","modified":1677593837000},{"_id":"source/img/logo/4.svg","hash":"dbdbb40cae8cc20892b96aa63813924ecf669e29","modified":1677593878000},{"_id":"source/img/logo/5.svg","hash":"72285272ff64ebf1c6217cdd385540d0f62c1185","modified":1677593878000},{"_id":"source/img/logo/6.svg","hash":"27a5067ec922e13ba296d59d8db1b1094f6ccd1c","modified":1677593878000},{"_id":"source/_posts/BFC/5.png","hash":"d587bf92b5eda087c53ff3a21c0c41a2836bee18","modified":1677353610000},{"_id":"source/_posts/BFC/2.png","hash":"1c89eadcb4b80ecf675954b0f808f099b87c9d68","modified":1677353610000},{"_id":"source/_posts/BFC/1.png","hash":"c74117161d65f282743ec87fb7de4b0891510ca9","modified":1677353610000},{"_id":"source/_posts/BFC/4.png","hash":"21c3a89ffccbdbfc9fd8c6217592a25b6fd76b3d","modified":1677353610000},{"_id":"source/_posts/浏览器同源策略/1.png","hash":"212abda7729277e82e7b6bd3e69664726dec6b75","modified":1677468870000},{"_id":"source/_posts/浏览器同源策略/3.png","hash":"5d99263ab48a715f58d80e3c197f202e2fa0a8e3","modified":1677468870000},{"_id":"source/_posts/浏览器同源策略/2.png","hash":"adf3ba428627eb4ce5b1f062686708fddb674b79","modified":1677468870000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1677596204437},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1677596203521},{"_id":"themes/fluid/_config.yml","hash":"088788e149051fc0a3c6096ba95e35a8344de04b","modified":1677596203545},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1677596203543},{"_id":"themes/fluid/package.json","hash":"30e3f4ccfef8474c05cf0b1eb02e91bd0a152807","modified":1677596203698},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1677596203569},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1677596203682},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1677596203684},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1677596203687},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1677596203685},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1677596203689},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1677596203690},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1677596203694},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1677596203683},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1677596203696},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1677596203547},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1677596203550},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1677596203548},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1677596203553},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1677596203551},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1677596203563},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1677596203565},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1677596203557},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1677596203566},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1677596203572},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1677596203592},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1677596203600},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1677596203601},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1677596203619},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1677596203633},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1677596203640},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1677596203714},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1677596203681},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1677596203750},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1677596203749},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1677596203573},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1677596203828},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1677596203590},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1677596203680},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1677596203808},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1677596203829},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1677596203832},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1677596203839},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1677596203854},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1677596203871},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1677596203872},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1677596203747},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1677596203745},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1677596203875},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1677596203917},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1677596203746},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1677596203999},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1677596203859},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1677596203889},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1677596204025},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1677596204024},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1677596204046},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1677596204036},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1677596203574},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1677596204445},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1677596204443},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1677596204450},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1677596204447},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1677596204458},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1677596204462},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1677596204477},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1677596204446},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1677596204464},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1677596204469},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1677596204466},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1677596204471},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1677596204467},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1677596204474},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1677596204473},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1677596204475},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1677596203984},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1677596203577},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1677596203579},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1677596203578},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1677596203581},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1677596203582},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1677596203583},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1677596203585},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1677596203584},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1677596203587},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1677596203589},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1677596203588},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1677596203596},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1677596203598},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"b83ac14a4b9503ccbba571b333314aa616bb46f8","modified":1677597515413},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"1ce751519276d36b3f4c2629f1f6ec085d009d6a","modified":1677596842357},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1677596203644},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1677596203648},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1677596203649},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1677596203650},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1677596203656},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1677596203655},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1677596203651},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1677596203657},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1677596203671},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1677596203673},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1677596203672},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1677596203692},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1677596203688},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1677596203675},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1677596203678},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1677596203739},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1677596203740},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1677596203679},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1677596203728},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1677596203727},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1677596203741},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1677596203742},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1677596203743},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1677596204058},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1677596204056},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1677596204442},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1677596204440},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1677596204069},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1677596204238},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1677596204078},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1677596204248},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1677596204249},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1677596204258},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1677596204260},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1677596204416},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1677596204421},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1677596204432},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1677596204436},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1677596204433},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1677596204439},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1677596204224},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1677596204227},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1677596204228},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1677596204226},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1677596204101},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1677596204124},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1677596204125},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1677596204130},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1677596204137},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1677596204156},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"b532cb15f56fbf346ca8f82a643bbbcefab30688","modified":1677598310506},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1677596204168},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1677596204170},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1677596204174},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1677596204179},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1677596204180},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1677596204205},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1677596204214},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1677596204148},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1677596204161},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1677596203858},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1677596203676},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1677596203874},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1677596203642},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1677596204456},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1677596203647},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1677596204455}],"Category":[{"name":"Javacsript","_id":"cleoahbem000rc8dfadi21pzp"},{"name":"z","_id":"cleoahw9z000tc8df5mt20mm6"},{"name":"W","parent":"cleoahbem000rc8dfadi21pzp","_id":"cleoai20y000wc8df1eka86mq"},{"name":"Web前端","parent":"cleoahbem000rc8dfadi21pzp","_id":"cleoai5gu000yc8df2x985tnv"},{"name":"Web前端","_id":"cleoaicd10010c8df2try5jqc"},{"name":"Javascript","parent":"cleoaicd10010c8df2try5jqc","_id":"cleoaihe80012c8df21166241"},{"name":"WE","_id":"cleoblwre0001lpdf6yfxay0r"},{"name":"CSS","parent":"cleoaicd10010c8df2try5jqc","_id":"cleobm4900004lpdf6ll2d4mc"},{"name":"前端","_id":"cleobm65h0006lpdfe59u6dur"},{"name":"CSS","parent":"cleobm65h0006lpdfe59u6dur","_id":"cleobm65i0007lpdf85x0g2uh"},{"name":"WEB前端","_id":"cleobm7e2000alpdf19v71zhq"},{"name":"CSS","parent":"cleobm7e2000alpdf19v71zhq","_id":"cleobm7e2000blpdf6n0c6mxh"},{"name":"浏览器原理","_id":"cleobxzf1000ylpdf40fs0irk"}],"Data":[{"_id":"languages/zh-CN","data":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}}],"Page":[{"title":"关于我","date":"2022-12-27T11:25:53.000Z","_content":"\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2022-12-27 19:25:53\n---\n\n\n","updated":"2022-12-30T05:40:13.870Z","path":"about/index.html","comments":1,"layout":"page","_id":"cldpxrq6b0000srdfapi2hkuj","content":"","site":{"data":{"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}}},"excerpt":"","more":""},{"_content":"[data-user-color-scheme=\"light\"] {\n    --navbar-bg-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] body {\n    background-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] .top-nav-collapse {\n    --navbar-text-color: #000;\n}\n\n[data-user-color-scheme=\"dark\"] {\n    --body-bg-color: #121211;\n    --navbar-bg-color: #212121;\n    --board-bg-color: #2a2a2a;\n}","source":"css/custom.css","raw":"[data-user-color-scheme=\"light\"] {\n    --navbar-bg-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] body {\n    background-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] .top-nav-collapse {\n    --navbar-text-color: #000;\n}\n\n[data-user-color-scheme=\"dark\"] {\n    --body-bg-color: #121211;\n    --navbar-bg-color: #212121;\n    --board-bg-color: #2a2a2a;\n}","date":"2023-02-28T14:03:24.128Z","updated":"2023-02-28T14:03:24.128Z","path":"css/custom.css","layout":"false","_id":"cldpxrq6i0002srdfd5o5eby5","title":"","comments":1,"content":"[data-user-color-scheme=\"light\"] {\n    --navbar-bg-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] body {\n    background-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] .top-nav-collapse {\n    --navbar-text-color: #000;\n}\n\n[data-user-color-scheme=\"dark\"] {\n    --body-bg-color: #121211;\n    --navbar-bg-color: #212121;\n    --board-bg-color: #2a2a2a;\n}","site":{"data":{"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}}},"excerpt":"","more":"[data-user-color-scheme=\"light\"] {\n    --navbar-bg-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] body {\n    background-color: #fff;\n}\n\n[data-user-color-scheme=\"light\"] .top-nav-collapse {\n    --navbar-text-color: #000;\n}\n\n[data-user-color-scheme=\"dark\"] {\n    --body-bg-color: #121211;\n    --navbar-bg-color: #212121;\n    --board-bg-color: #2a2a2a;\n}"}],"Post":[{"title":"this指针和箭头函数","date":"2023-02-28T13:10:23.000Z","excerpt":"this是一个引用，指向当前函数执行的上下文对象。是在运行时绑定的。","_content":"# 什么是`this`？\n\n`this`是一个引用，指向当前函数执行的**上下文对象**。是在运行时绑定的。\n\n>💡 执行上下文\n当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 \"**执行上下文(execution context 简称 EC)**\" 或者也可以叫做 **执行环境**。\n执行上下文 为我们的可执行代码块提供了执行前的必要准备工作，例如变量对象的定义、作用域链的扩展、提供调用者的对象引用等信息。\n\n\n\n\n![this.png](this.png)\n\n# this的绑定规则\n\n优先级：`new` > 显示绑定 > 隐式绑定 > 默认绑定\n\n## 默认绑定\n\n当函数被**独立调用**时，默认函数的`this`指向**全局对象**，此时在浏览器运行环境中，能获取到全局对象下使用[var操作符定义的变量，但不能获取到let定义的变量](https://www.notion.so/c80e2b095b104f7f8c53c745185de9d0)。\n\n当在[严格模式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode)下时，`this`不能获取到全局对象下的变量。\n\n```jsx\n// 浏览器运行环境下\nfunction foo(){\n\tconsole.log('name is: ', this.name);\n\tconsole.log('age is: ', this.age);\n}\n\nvar name = 'kira';\nlet age = 3;\n\nfoo();\n// name is:  kira\n// age is:  undefined\n```\n\n```jsx\n// 严格模式\n\"use strict\";\nfunction foo(){\n\tconsole.log('name is: ', this.name);\n\tconsole.log('age is: ', this.age);\n\n}\n\nvar name = 'kira';\nlet age = 3;\n\nfoo();\n/* \n   Uncaught TypeError: Cannot read property 'name' of undefined at foo \n*/\n```\n\n## 隐式绑定\n\n使用**对象调用**时，函数的`this`会指向当前调用的对象。\n\n`this` 指向链式调用的最后一层\n\n```jsx\nfunction foo(){\n\tconsole.log('name is: ', this.name);\n\tconsole.log('age is: ', this.age);\n\n}\n\nconst person = {\n\tname: 'kira',\n\tage: 3,\n\tfoo: foo\n}\n\nperson.foo();\n// name is:  kira\n// age is:  3\n```\n\n**还需要注意的是隐式绑定丢失：**\n\n当把对象 `o` 的方法 `o.method` 赋值给一个变量 `fn`，然后再调用这个变量 `fn` 的时候，`this` 不会指向这个对象 `o`，而会指向全局对象。\n这是因为，赋值语句是静态执行，而 `this` 绑定是动态绑定。\n当我们把一个函数，无论是【对象的方法】还是【普通函数】赋值给一个变量的时候，实际上我们是把当前函数的引用（也就是函数存放的地址）赋值给这个变量。\n而当我们真正调用的时候，才会绑定 `this` ，此时对于这个函数变量来说，就是以独立的形式被调用了，所以此时 `this` 为默认绑定。\n\n这种隐式丢失的情况有2种：\n1. 直接把对象方法赋值给一个变量\n2. 把一个对象方法作为参数传给另一个函数，这里因为存在给参数变量隐式赋值的步骤，所以也会丢失\n\n```jsx\nconst obj = {\n\tname: 'kira',\n\tfoo(){\n\t\tconsole.log('name is: ',this.name);\n\t}\n}\nvar name = 'window';\nvar windowFoo = obj.foo;  // 隐式丢失：情况1\n\nfunction showFoo(fn){\n\tfn();  // 隐式丢失：情况2\n}\n\nobj.foo();\nwindowFoo();\nshowFoo(obj.foo);\nsetTimeout(obj.foo, 1000) // 隐式丢失： 情况2\n\n// name is:  kira\n// name is:  window\n// name is:  window\n// name is:  window\n```\n\n## 显示绑定\n\n显示绑定是指给函数直接指定上下文参数（`context`）。显示绑定有4种方式：\n\n- `call`\n- `apply`\n- `bind` ：关于`bind`绑定，要注意以下2点：\n    - 使用`bind`绑定过的函数，只有使用`new`方法调用才可以更改函数的`this`值\n- `js`内置函数中的参数传递：例如数组原型方法中的可选参数`context`，会把**回调函数** [ 非箭头函数 ] 的`this`指向传入的`context`\n  \n    \n\n- 这4种方式中，关于指定的`context` 的类型，`this`的指向：\n    - `undefined`  `null` : 指向全局对象\n    - `string` `number` `bool` ：指向当前值类型的原型实例\n    - `function`：指向函数本身\n    - 引用类型 `object` `array`：指向引用对象\n\n```jsx\n// js中内置函数参数传递\nlet arr = ['context'];\narr.forEach(function(){console.log('this', this)}, {name: '非箭头函数'});\narr.forEach(() => {console.log('this', this)}, {name: '箭头函数'});\n```\n\n![显示绑定：数组传入上下文](1.png)\n\n```jsx\n// 传入各种类型的context\n// call, apply, bind, 内置函数中的参数传递同理\nfunction getContext(){\n    console.log('当前函数的上下文对象 this是：', this);\n}\n\nfunction fnContext(){\n    console.log('fnContext函数作为上下文对象')\n}\n\nlet arr = ['array', 'context'];\nlet obj = {\n    name: 'objContext'\n}\n\ngetContext.call(undefined) // window\ngetContext.call(null) // window\ngetContext.call('string') // String\ngetContext.call(123) // Number\ngetContext.call(true) // Boolean\ngetContext.call(fnContext) // fnContext\ngetContext.call(arr) // arr\ngetContext.call(obj) // obj\n```\n控制台打印结果：\n![传入各种类型的上下文](2.png)\n\n## new绑定\n\n`new` 操作符的步骤\n![new操作步骤](3.png)\n\n注意，使用`new`创建对象时，如果构造函数返回的是引用类型，则`new`操作生成的对象会被这个引用类型取代。\n\n```jsx\n  function Foo(value){\n      this.name = 'foo';\n      this.value = value;\n      return value;\n  }\n\n  let obj = {type: 'object'};\n  let arr = [];\n  let fn = function(){console.log('this is a function')}\n  console.log(new Foo());\n  console.log(new Foo(null));\n  console.log(new Foo(undefined));\n  console.log(new Foo(1));\n  console.log(new Foo(true));\n  console.log(new Foo('string'));\n  console.log(new Foo(obj), obj);\n  console.log(new Foo(arr), arr);\n  console.log(new Foo(fn), fn);\n```\n\n![new创建对象，构造函数返回不同类型时的结果](7.png)\n\n# 箭头函数\n## 箭头函数`this`对象\n箭头函数没有`this`对象，或者说箭头函数的`this`对象早在词法分析时就已经被“绑定”为上层词法作用域（也就是函数声明时所在的作用域）的`this`了。\n\n例如下面这个例子：\n1. 当`outer`调用时，`this`对象被绑定为`obj`；\n2. 因为箭头函数是在`outer`方法中声明的，所以此时返回的箭头函数的`this`被“绑定”为`outer`实际执行时的`this`对象。所以无论该箭头函数在何处被调用，都不会发生改变。\n3. 而如果返回的是普通函数，那么该函数的`this`对象就会根据调用方式而发生变化。\n```jsx\n  function outer() {\n      let arrowFn = () => {\n          console.log('当前在global环境下调用箭头函数，this：', this)\n      }\n      let fn = function () {\n          console.log('当前在global环境下调用普通函数，this：', this)\n      }\n      return [arrowFn, fn];\n  }\n\n  let obj = { name: 'obj' };\n  let obj1 = {name: 'obj1'};\n  // 将outer的this绑定为obj\n  let [arrowFn, fn] = outer.call(obj);\n  arrowFn();\n  fn();\n\n  //绑定this\n  arrowFn.call(obj1);\n  fn.call(obj1);\n```\n控制台打印\n\n![箭头函数与普通函数的this值对比](8.png)\n\n\n## 箭头函数与普通函数的区别\n（1）箭头函数的 `this` 值等于**箭头函数**在**声明**时所在的**上层函数**在**调用**时所绑定的`this`值。示例如上。\n\n（2）箭头函数没有自己的 `this` `prototype` `arguments` `super` 和 `new.target`\n```jsx\n// 箭头函数和普通函数\nlet arrowFn = (arg1) => {};\nfunction fn(arg1){};\nconsole.dir(arrowFn)\nconsole.dir(fn)\n```\n控制台打印：\n\n![箭头函数没有this等属性](4.png)\n\n\n（3）箭头函数的不能用作构造函数\n\n![new一个箭头函数会报错](5.png)\n\n\n\n# 总结\n1. 对 `this` 对象的理解\nthis 是一个引用，指向当前函数的调用对象。对于非箭头函数来说，\n   1. 当独立调用函数时，`this`指向全局对象；\n   2. 当函数作为对象的方法调用时，`this`指向这个当前对象；\n   3. 当函数以`call`，`apply`，`bind`调用，或者对于一些内置的函数例如数组的`forEach`，`map`方法，传入指定的上下文对象时，`this`指向绑定的上下文对象。其中根据传入的上下文对象类型，`this`会指向不同的对象：\n      1. 如果传入是`null`或者`undefined`，则this指向全局对象；\n      2. 如果传入的是`number`, `string`, `boolean`值，js会将当前值实例化，并将`this`指向其实例。（根据当前基本类型的原型对象创建实例，并将当前值作为value参数传入构造函数）；\n      3. 如果传入的是函数，则会指向函数对象本身；\n      4. 如果传入的是引用类型，则直接指向该引用对象。\n   4. 如果用`new`调用函数，则`this`会指向该函数原型的实例对象。\n\n2. 箭头函数和普通函数的区别？\n箭头函数没有自己的 `this` `arguments` `prototype` `super`和`new.target` 以及箭头函数不能作为构造函数使用\n\n3. 箭头函数的 `this` 指向哪里？\n箭头函数的this等于其函数**声明**时所在的**上级函数被调用**时的`this`\n\n4. 如果`new` 一个箭头函数，会发生什么？\n会报错，提示箭头函数没有构造函数","source":"_posts/this指针.md","raw":"---\ntitle: this指针和箭头函数\ndate: 2023-02-28 21:10:23\ncategory: [Web前端, Javascript]\nexcerpt: this是一个引用，指向当前函数执行的上下文对象。是在运行时绑定的。\ntags: <span class=\"label label-primary\">this</span> <span class=\"label label-primary\">箭头函数</span>\n---\n# 什么是`this`？\n\n`this`是一个引用，指向当前函数执行的**上下文对象**。是在运行时绑定的。\n\n>💡 执行上下文\n当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 \"**执行上下文(execution context 简称 EC)**\" 或者也可以叫做 **执行环境**。\n执行上下文 为我们的可执行代码块提供了执行前的必要准备工作，例如变量对象的定义、作用域链的扩展、提供调用者的对象引用等信息。\n\n\n\n\n![this.png](this.png)\n\n# this的绑定规则\n\n优先级：`new` > 显示绑定 > 隐式绑定 > 默认绑定\n\n## 默认绑定\n\n当函数被**独立调用**时，默认函数的`this`指向**全局对象**，此时在浏览器运行环境中，能获取到全局对象下使用[var操作符定义的变量，但不能获取到let定义的变量](https://www.notion.so/c80e2b095b104f7f8c53c745185de9d0)。\n\n当在[严格模式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode)下时，`this`不能获取到全局对象下的变量。\n\n```jsx\n// 浏览器运行环境下\nfunction foo(){\n\tconsole.log('name is: ', this.name);\n\tconsole.log('age is: ', this.age);\n}\n\nvar name = 'kira';\nlet age = 3;\n\nfoo();\n// name is:  kira\n// age is:  undefined\n```\n\n```jsx\n// 严格模式\n\"use strict\";\nfunction foo(){\n\tconsole.log('name is: ', this.name);\n\tconsole.log('age is: ', this.age);\n\n}\n\nvar name = 'kira';\nlet age = 3;\n\nfoo();\n/* \n   Uncaught TypeError: Cannot read property 'name' of undefined at foo \n*/\n```\n\n## 隐式绑定\n\n使用**对象调用**时，函数的`this`会指向当前调用的对象。\n\n`this` 指向链式调用的最后一层\n\n```jsx\nfunction foo(){\n\tconsole.log('name is: ', this.name);\n\tconsole.log('age is: ', this.age);\n\n}\n\nconst person = {\n\tname: 'kira',\n\tage: 3,\n\tfoo: foo\n}\n\nperson.foo();\n// name is:  kira\n// age is:  3\n```\n\n**还需要注意的是隐式绑定丢失：**\n\n当把对象 `o` 的方法 `o.method` 赋值给一个变量 `fn`，然后再调用这个变量 `fn` 的时候，`this` 不会指向这个对象 `o`，而会指向全局对象。\n这是因为，赋值语句是静态执行，而 `this` 绑定是动态绑定。\n当我们把一个函数，无论是【对象的方法】还是【普通函数】赋值给一个变量的时候，实际上我们是把当前函数的引用（也就是函数存放的地址）赋值给这个变量。\n而当我们真正调用的时候，才会绑定 `this` ，此时对于这个函数变量来说，就是以独立的形式被调用了，所以此时 `this` 为默认绑定。\n\n这种隐式丢失的情况有2种：\n1. 直接把对象方法赋值给一个变量\n2. 把一个对象方法作为参数传给另一个函数，这里因为存在给参数变量隐式赋值的步骤，所以也会丢失\n\n```jsx\nconst obj = {\n\tname: 'kira',\n\tfoo(){\n\t\tconsole.log('name is: ',this.name);\n\t}\n}\nvar name = 'window';\nvar windowFoo = obj.foo;  // 隐式丢失：情况1\n\nfunction showFoo(fn){\n\tfn();  // 隐式丢失：情况2\n}\n\nobj.foo();\nwindowFoo();\nshowFoo(obj.foo);\nsetTimeout(obj.foo, 1000) // 隐式丢失： 情况2\n\n// name is:  kira\n// name is:  window\n// name is:  window\n// name is:  window\n```\n\n## 显示绑定\n\n显示绑定是指给函数直接指定上下文参数（`context`）。显示绑定有4种方式：\n\n- `call`\n- `apply`\n- `bind` ：关于`bind`绑定，要注意以下2点：\n    - 使用`bind`绑定过的函数，只有使用`new`方法调用才可以更改函数的`this`值\n- `js`内置函数中的参数传递：例如数组原型方法中的可选参数`context`，会把**回调函数** [ 非箭头函数 ] 的`this`指向传入的`context`\n  \n    \n\n- 这4种方式中，关于指定的`context` 的类型，`this`的指向：\n    - `undefined`  `null` : 指向全局对象\n    - `string` `number` `bool` ：指向当前值类型的原型实例\n    - `function`：指向函数本身\n    - 引用类型 `object` `array`：指向引用对象\n\n```jsx\n// js中内置函数参数传递\nlet arr = ['context'];\narr.forEach(function(){console.log('this', this)}, {name: '非箭头函数'});\narr.forEach(() => {console.log('this', this)}, {name: '箭头函数'});\n```\n\n![显示绑定：数组传入上下文](1.png)\n\n```jsx\n// 传入各种类型的context\n// call, apply, bind, 内置函数中的参数传递同理\nfunction getContext(){\n    console.log('当前函数的上下文对象 this是：', this);\n}\n\nfunction fnContext(){\n    console.log('fnContext函数作为上下文对象')\n}\n\nlet arr = ['array', 'context'];\nlet obj = {\n    name: 'objContext'\n}\n\ngetContext.call(undefined) // window\ngetContext.call(null) // window\ngetContext.call('string') // String\ngetContext.call(123) // Number\ngetContext.call(true) // Boolean\ngetContext.call(fnContext) // fnContext\ngetContext.call(arr) // arr\ngetContext.call(obj) // obj\n```\n控制台打印结果：\n![传入各种类型的上下文](2.png)\n\n## new绑定\n\n`new` 操作符的步骤\n![new操作步骤](3.png)\n\n注意，使用`new`创建对象时，如果构造函数返回的是引用类型，则`new`操作生成的对象会被这个引用类型取代。\n\n```jsx\n  function Foo(value){\n      this.name = 'foo';\n      this.value = value;\n      return value;\n  }\n\n  let obj = {type: 'object'};\n  let arr = [];\n  let fn = function(){console.log('this is a function')}\n  console.log(new Foo());\n  console.log(new Foo(null));\n  console.log(new Foo(undefined));\n  console.log(new Foo(1));\n  console.log(new Foo(true));\n  console.log(new Foo('string'));\n  console.log(new Foo(obj), obj);\n  console.log(new Foo(arr), arr);\n  console.log(new Foo(fn), fn);\n```\n\n![new创建对象，构造函数返回不同类型时的结果](7.png)\n\n# 箭头函数\n## 箭头函数`this`对象\n箭头函数没有`this`对象，或者说箭头函数的`this`对象早在词法分析时就已经被“绑定”为上层词法作用域（也就是函数声明时所在的作用域）的`this`了。\n\n例如下面这个例子：\n1. 当`outer`调用时，`this`对象被绑定为`obj`；\n2. 因为箭头函数是在`outer`方法中声明的，所以此时返回的箭头函数的`this`被“绑定”为`outer`实际执行时的`this`对象。所以无论该箭头函数在何处被调用，都不会发生改变。\n3. 而如果返回的是普通函数，那么该函数的`this`对象就会根据调用方式而发生变化。\n```jsx\n  function outer() {\n      let arrowFn = () => {\n          console.log('当前在global环境下调用箭头函数，this：', this)\n      }\n      let fn = function () {\n          console.log('当前在global环境下调用普通函数，this：', this)\n      }\n      return [arrowFn, fn];\n  }\n\n  let obj = { name: 'obj' };\n  let obj1 = {name: 'obj1'};\n  // 将outer的this绑定为obj\n  let [arrowFn, fn] = outer.call(obj);\n  arrowFn();\n  fn();\n\n  //绑定this\n  arrowFn.call(obj1);\n  fn.call(obj1);\n```\n控制台打印\n\n![箭头函数与普通函数的this值对比](8.png)\n\n\n## 箭头函数与普通函数的区别\n（1）箭头函数的 `this` 值等于**箭头函数**在**声明**时所在的**上层函数**在**调用**时所绑定的`this`值。示例如上。\n\n（2）箭头函数没有自己的 `this` `prototype` `arguments` `super` 和 `new.target`\n```jsx\n// 箭头函数和普通函数\nlet arrowFn = (arg1) => {};\nfunction fn(arg1){};\nconsole.dir(arrowFn)\nconsole.dir(fn)\n```\n控制台打印：\n\n![箭头函数没有this等属性](4.png)\n\n\n（3）箭头函数的不能用作构造函数\n\n![new一个箭头函数会报错](5.png)\n\n\n\n# 总结\n1. 对 `this` 对象的理解\nthis 是一个引用，指向当前函数的调用对象。对于非箭头函数来说，\n   1. 当独立调用函数时，`this`指向全局对象；\n   2. 当函数作为对象的方法调用时，`this`指向这个当前对象；\n   3. 当函数以`call`，`apply`，`bind`调用，或者对于一些内置的函数例如数组的`forEach`，`map`方法，传入指定的上下文对象时，`this`指向绑定的上下文对象。其中根据传入的上下文对象类型，`this`会指向不同的对象：\n      1. 如果传入是`null`或者`undefined`，则this指向全局对象；\n      2. 如果传入的是`number`, `string`, `boolean`值，js会将当前值实例化，并将`this`指向其实例。（根据当前基本类型的原型对象创建实例，并将当前值作为value参数传入构造函数）；\n      3. 如果传入的是函数，则会指向函数对象本身；\n      4. 如果传入的是引用类型，则直接指向该引用对象。\n   4. 如果用`new`调用函数，则`this`会指向该函数原型的实例对象。\n\n2. 箭头函数和普通函数的区别？\n箭头函数没有自己的 `this` `arguments` `prototype` `super`和`new.target` 以及箭头函数不能作为构造函数使用\n\n3. 箭头函数的 `this` 指向哪里？\n箭头函数的this等于其函数**声明**时所在的**上级函数被调用**时的`this`\n\n4. 如果`new` 一个箭头函数，会发生什么？\n会报错，提示箭头函数没有构造函数","slug":"this指针","published":1,"updated":"2023-02-28T14:11:06.990Z","_id":"cleo9o0660000c8dffkmyarim","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是this？\"><a href=\"#什么是this？\" class=\"headerlink\" title=\"什么是this？\"></a>什么是<code>this</code>？</h1><p><code>this</code>是一个引用，指向当前函数执行的<strong>上下文对象</strong>。是在运行时绑定的。</p>\n<blockquote>\n<p>💡 执行上下文<br>当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 “<strong>执行上下文(execution context 简称 EC)</strong>“ 或者也可以叫做 <strong>执行环境</strong>。<br>执行上下文 为我们的可执行代码块提供了执行前的必要准备工作，例如变量对象的定义、作用域链的扩展、提供调用者的对象引用等信息。</p>\n</blockquote>\n<p><img src=\"this.png\" alt=\"this.png\"></p>\n<h1 id=\"this的绑定规则\"><a href=\"#this的绑定规则\" class=\"headerlink\" title=\"this的绑定规则\"></a>this的绑定规则</h1><p>优先级：<code>new</code> &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>当函数被<strong>独立调用</strong>时，默认函数的<code>this</code>指向<strong>全局对象</strong>，此时在浏览器运行环境中，能获取到全局对象下使用<a href=\"https://www.notion.so/c80e2b095b104f7f8c53c745185de9d0\">var操作符定义的变量，但不能获取到let定义的变量</a>。</p>\n<p>当在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a>下时，<code>this</code>不能获取到全局对象下的变量。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 浏览器运行环境下</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;age is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;kira&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">3</span>;<br><br><span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-comment\">// name is:  kira</span><br><span class=\"hljs-comment\">// age is:  undefined</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 严格模式</span><br><span class=\"hljs-meta\">&quot;use strict&quot;</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;age is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;kira&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">3</span>;<br><br><span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">   Uncaught TypeError: Cannot read property &#x27;name&#x27; of undefined at foo </span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>使用<strong>对象调用</strong>时，函数的<code>this</code>会指向当前调用的对象。</p>\n<p><code>this</code> 指向链式调用的最后一层</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;age is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> person = &#123;<br>\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;kira&#x27;</span>,<br>\t<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">3</span>,<br>\t<span class=\"hljs-attr\">foo</span>: foo<br>&#125;<br><br>person.<span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-comment\">// name is:  kira</span><br><span class=\"hljs-comment\">// age is:  3</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>还需要注意的是隐式绑定丢失：</strong></p>\n<p>当把对象 <code>o</code> 的方法 <code>o.method</code> 赋值给一个变量 <code>fn</code>，然后再调用这个变量 <code>fn</code> 的时候，<code>this</code> 不会指向这个对象 <code>o</code>，而会指向全局对象。<br>这是因为，赋值语句是静态执行，而 <code>this</code> 绑定是动态绑定。<br>当我们把一个函数，无论是【对象的方法】还是【普通函数】赋值给一个变量的时候，实际上我们是把当前函数的引用（也就是函数存放的地址）赋值给这个变量。<br>而当我们真正调用的时候，才会绑定 <code>this</code> ，此时对于这个函数变量来说，就是以独立的形式被调用了，所以此时 <code>this</code> 为默认绑定。</p>\n<p>这种隐式丢失的情况有2种：</p>\n<ol>\n<li>直接把对象方法赋值给一个变量</li>\n<li>把一个对象方法作为参数传给另一个函数，这里因为存在给参数变量隐式赋值的步骤，所以也会丢失</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;kira&#x27;</span>,<br>\t<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t&#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;window&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> windowFoo = obj.<span class=\"hljs-property\">foo</span>;  <span class=\"hljs-comment\">// 隐式丢失：情况1</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">showFoo</span>(<span class=\"hljs-params\">fn</span>)&#123;<br>\t<span class=\"hljs-title function_\">fn</span>();  <span class=\"hljs-comment\">// 隐式丢失：情况2</span><br>&#125;<br><br>obj.<span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-title function_\">windowFoo</span>();<br><span class=\"hljs-title function_\">showFoo</span>(obj.<span class=\"hljs-property\">foo</span>);<br><span class=\"hljs-built_in\">setTimeout</span>(obj.<span class=\"hljs-property\">foo</span>, <span class=\"hljs-number\">1000</span>) <span class=\"hljs-comment\">// 隐式丢失： 情况2</span><br><br><span class=\"hljs-comment\">// name is:  kira</span><br><span class=\"hljs-comment\">// name is:  window</span><br><span class=\"hljs-comment\">// name is:  window</span><br><span class=\"hljs-comment\">// name is:  window</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h2><p>显示绑定是指给函数直接指定上下文参数（<code>context</code>）。显示绑定有4种方式：</p>\n<ul>\n<li><p><code>call</code></p>\n</li>\n<li><p><code>apply</code></p>\n</li>\n<li><p><code>bind</code> ：关于<code>bind</code>绑定，要注意以下2点：</p>\n<ul>\n<li>使用<code>bind</code>绑定过的函数，只有使用<code>new</code>方法调用才可以更改函数的<code>this</code>值</li>\n</ul>\n</li>\n<li><p><code>js</code>内置函数中的参数传递：例如数组原型方法中的可选参数<code>context</code>，会把<strong>回调函数</strong> [ 非箭头函数 ] 的<code>this</code>指向传入的<code>context</code></p>\n</li>\n<li><p>这4种方式中，关于指定的<code>context</code> 的类型，<code>this</code>的指向：</p>\n<ul>\n<li><code>undefined</code>  <code>null</code> : 指向全局对象</li>\n<li><code>string</code> <code>number</code> <code>bool</code> ：指向当前值类型的原型实例</li>\n<li><code>function</code>：指向函数本身</li>\n<li>引用类型 <code>object</code> <code>array</code>：指向引用对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// js中内置函数参数传递</span><br><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;context&#x27;</span>];<br>arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)&#125;, &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;非箭头函数&#x27;</span>&#125;);<br>arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)&#125;, &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;箭头函数&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"1.png\" alt=\"显示绑定：数组传入上下文\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 传入各种类型的context</span><br><span class=\"hljs-comment\">// call, apply, bind, 内置函数中的参数传递同理</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前函数的上下文对象 this是：&#x27;</span>, <span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fnContext</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;fnContext函数作为上下文对象&#x27;</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;array&#x27;</span>, <span class=\"hljs-string\">&#x27;context&#x27;</span>];<br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;objContext&#x27;</span><br>&#125;<br><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// window</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// window</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-comment\">// String</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-number\">123</span>) <span class=\"hljs-comment\">// Number</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// Boolean</span><br>getContext.<span class=\"hljs-title function_\">call</span>(fnContext) <span class=\"hljs-comment\">// fnContext</span><br>getContext.<span class=\"hljs-title function_\">call</span>(arr) <span class=\"hljs-comment\">// arr</span><br>getContext.<span class=\"hljs-title function_\">call</span>(obj) <span class=\"hljs-comment\">// obj</span><br></code></pre></td></tr></table></figure>\n<p>控制台打印结果：<br><img src=\"2.png\" alt=\"传入各种类型的上下文\"></p>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p><code>new</code> 操作符的步骤<br><img src=\"3.png\" alt=\"new操作步骤\"></p>\n<p>注意，使用<code>new</code>创建对象时，如果构造函数返回的是引用类型，则<code>new</code>操作生成的对象会被这个引用类型取代。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\">value</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;foo&#x27;</span>;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;<br>    <span class=\"hljs-keyword\">return</span> value;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> obj = &#123;<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;object&#x27;</span>&#125;;<br><span class=\"hljs-keyword\">let</span> arr = [];<br><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this is a function&#x27;</span>)&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-literal\">null</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-literal\">undefined</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-number\">1</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-literal\">true</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-string\">&#x27;string&#x27;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(obj), obj);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(arr), arr);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(fn), fn);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"7.png\" alt=\"new创建对象，构造函数返回不同类型时的结果\"></p>\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><h2 id=\"箭头函数this对象\"><a href=\"#箭头函数this对象\" class=\"headerlink\" title=\"箭头函数this对象\"></a>箭头函数<code>this</code>对象</h2><p>箭头函数没有<code>this</code>对象，或者说箭头函数的<code>this</code>对象早在词法分析时就已经被“绑定”为上层词法作用域（也就是函数声明时所在的作用域）的<code>this</code>了。</p>\n<p>例如下面这个例子：</p>\n<ol>\n<li>当<code>outer</code>调用时，<code>this</code>对象被绑定为<code>obj</code>；</li>\n<li>因为箭头函数是在<code>outer</code>方法中声明的，所以此时返回的箭头函数的<code>this</code>被“绑定”为<code>outer</code>实际执行时的<code>this</code>对象。所以无论该箭头函数在何处被调用，都不会发生改变。</li>\n<li>而如果返回的是普通函数，那么该函数的<code>this</code>对象就会根据调用方式而发生变化。<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">arrowFn</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前在global环境下调用箭头函数，this：&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前在global环境下调用普通函数，this：&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> [arrowFn, fn];<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> obj = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;obj&#x27;</span> &#125;;<br><span class=\"hljs-keyword\">let</span> obj1 = &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;obj1&#x27;</span>&#125;;<br><span class=\"hljs-comment\">// 将outer的this绑定为obj</span><br><span class=\"hljs-keyword\">let</span> [arrowFn, fn] = outer.<span class=\"hljs-title function_\">call</span>(obj);<br><span class=\"hljs-title function_\">arrowFn</span>();<br><span class=\"hljs-title function_\">fn</span>();<br><br><span class=\"hljs-comment\">//绑定this</span><br>arrowFn.<span class=\"hljs-title function_\">call</span>(obj1);<br>fn.<span class=\"hljs-title function_\">call</span>(obj1);<br></code></pre></td></tr></table></figure>\n控制台打印</li>\n</ol>\n<p><img src=\"8.png\" alt=\"箭头函数与普通函数的this值对比\"></p>\n<h2 id=\"箭头函数与普通函数的区别\"><a href=\"#箭头函数与普通函数的区别\" class=\"headerlink\" title=\"箭头函数与普通函数的区别\"></a>箭头函数与普通函数的区别</h2><p>（1）箭头函数的 <code>this</code> 值等于<strong>箭头函数</strong>在<strong>声明</strong>时所在的<strong>上层函数</strong>在<strong>调用</strong>时所绑定的<code>this</code>值。示例如上。</p>\n<p>（2）箭头函数没有自己的 <code>this</code> <code>prototype</code> <code>arguments</code> <code>super</code> 和 <code>new.target</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 箭头函数和普通函数</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">arrowFn</span> = (<span class=\"hljs-params\">arg1</span>) =&gt; &#123;&#125;;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\">arg1</span>)&#123;&#125;;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(arrowFn)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(fn)<br></code></pre></td></tr></table></figure>\n<p>控制台打印：</p>\n<p><img src=\"4.png\" alt=\"箭头函数没有this等属性\"></p>\n<p>（3）箭头函数的不能用作构造函数</p>\n<p><img src=\"5.png\" alt=\"new一个箭头函数会报错\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li><p>对 <code>this</code> 对象的理解<br>this 是一个引用，指向当前函数的调用对象。对于非箭头函数来说，</p>\n<ol>\n<li>当独立调用函数时，<code>this</code>指向全局对象；</li>\n<li>当函数作为对象的方法调用时，<code>this</code>指向这个当前对象；</li>\n<li>当函数以<code>call</code>，<code>apply</code>，<code>bind</code>调用，或者对于一些内置的函数例如数组的<code>forEach</code>，<code>map</code>方法，传入指定的上下文对象时，<code>this</code>指向绑定的上下文对象。其中根据传入的上下文对象类型，<code>this</code>会指向不同的对象：<ol>\n<li>如果传入是<code>null</code>或者<code>undefined</code>，则this指向全局对象；</li>\n<li>如果传入的是<code>number</code>, <code>string</code>, <code>boolean</code>值，js会将当前值实例化，并将<code>this</code>指向其实例。（根据当前基本类型的原型对象创建实例，并将当前值作为value参数传入构造函数）；</li>\n<li>如果传入的是函数，则会指向函数对象本身；</li>\n<li>如果传入的是引用类型，则直接指向该引用对象。</li>\n</ol>\n</li>\n<li>如果用<code>new</code>调用函数，则<code>this</code>会指向该函数原型的实例对象。</li>\n</ol>\n</li>\n<li><p>箭头函数和普通函数的区别？<br>箭头函数没有自己的 <code>this</code> <code>arguments</code> <code>prototype</code> <code>super</code>和<code>new.target</code> 以及箭头函数不能作为构造函数使用</p>\n</li>\n<li><p>箭头函数的 <code>this</code> 指向哪里？<br>箭头函数的this等于其函数<strong>声明</strong>时所在的<strong>上级函数被调用</strong>时的<code>this</code></p>\n</li>\n<li><p>如果<code>new</code> 一个箭头函数，会发生什么？<br>会报错，提示箭头函数没有构造函数</p>\n</li>\n</ol>\n","site":{"data":{"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}}},"more":"<h1 id=\"什么是this？\"><a href=\"#什么是this？\" class=\"headerlink\" title=\"什么是this？\"></a>什么是<code>this</code>？</h1><p><code>this</code>是一个引用，指向当前函数执行的<strong>上下文对象</strong>。是在运行时绑定的。</p>\n<blockquote>\n<p>💡 执行上下文<br>当 JS 引擎解析到可执行代码片段（通常是函数调用阶段）的时候，就会先做一些执行前的准备工作，这个 “准备工作”，就叫做 “<strong>执行上下文(execution context 简称 EC)</strong>“ 或者也可以叫做 <strong>执行环境</strong>。<br>执行上下文 为我们的可执行代码块提供了执行前的必要准备工作，例如变量对象的定义、作用域链的扩展、提供调用者的对象引用等信息。</p>\n</blockquote>\n<p><img src=\"this.png\" alt=\"this.png\"></p>\n<h1 id=\"this的绑定规则\"><a href=\"#this的绑定规则\" class=\"headerlink\" title=\"this的绑定规则\"></a>this的绑定规则</h1><p>优先级：<code>new</code> &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</p>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>当函数被<strong>独立调用</strong>时，默认函数的<code>this</code>指向<strong>全局对象</strong>，此时在浏览器运行环境中，能获取到全局对象下使用<a href=\"https://www.notion.so/c80e2b095b104f7f8c53c745185de9d0\">var操作符定义的变量，但不能获取到let定义的变量</a>。</p>\n<p>当在<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode\">严格模式</a>下时，<code>this</code>不能获取到全局对象下的变量。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 浏览器运行环境下</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;age is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;kira&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">3</span>;<br><br><span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-comment\">// name is:  kira</span><br><span class=\"hljs-comment\">// age is:  undefined</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 严格模式</span><br><span class=\"hljs-meta\">&quot;use strict&quot;</span>;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;age is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br><br>&#125;<br><br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;kira&#x27;</span>;<br><span class=\"hljs-keyword\">let</span> age = <span class=\"hljs-number\">3</span>;<br><br><span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-comment\">/* </span><br><span class=\"hljs-comment\">   Uncaught TypeError: Cannot read property &#x27;name&#x27; of undefined at foo </span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>使用<strong>对象调用</strong>时，函数的<code>this</code>会指向当前调用的对象。</p>\n<p><code>this</code> 指向链式调用的最后一层</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;age is: &#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>);<br><br>&#125;<br><br><span class=\"hljs-keyword\">const</span> person = &#123;<br>\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;kira&#x27;</span>,<br>\t<span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">3</span>,<br>\t<span class=\"hljs-attr\">foo</span>: foo<br>&#125;<br><br>person.<span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-comment\">// name is:  kira</span><br><span class=\"hljs-comment\">// age is:  3</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>还需要注意的是隐式绑定丢失：</strong></p>\n<p>当把对象 <code>o</code> 的方法 <code>o.method</code> 赋值给一个变量 <code>fn</code>，然后再调用这个变量 <code>fn</code> 的时候，<code>this</code> 不会指向这个对象 <code>o</code>，而会指向全局对象。<br>这是因为，赋值语句是静态执行，而 <code>this</code> 绑定是动态绑定。<br>当我们把一个函数，无论是【对象的方法】还是【普通函数】赋值给一个变量的时候，实际上我们是把当前函数的引用（也就是函数存放的地址）赋值给这个变量。<br>而当我们真正调用的时候，才会绑定 <code>this</code> ，此时对于这个函数变量来说，就是以独立的形式被调用了，所以此时 <code>this</code> 为默认绑定。</p>\n<p>这种隐式丢失的情况有2种：</p>\n<ol>\n<li>直接把对象方法赋值给一个变量</li>\n<li>把一个对象方法作为参数传给另一个函数，这里因为存在给参数变量隐式赋值的步骤，所以也会丢失</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">const</span> obj = &#123;<br>\t<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;kira&#x27;</span>,<br>\t<span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>)&#123;<br>\t\t<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;name is: &#x27;</span>,<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>);<br>\t&#125;<br>&#125;<br><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;window&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> windowFoo = obj.<span class=\"hljs-property\">foo</span>;  <span class=\"hljs-comment\">// 隐式丢失：情况1</span><br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">showFoo</span>(<span class=\"hljs-params\">fn</span>)&#123;<br>\t<span class=\"hljs-title function_\">fn</span>();  <span class=\"hljs-comment\">// 隐式丢失：情况2</span><br>&#125;<br><br>obj.<span class=\"hljs-title function_\">foo</span>();<br><span class=\"hljs-title function_\">windowFoo</span>();<br><span class=\"hljs-title function_\">showFoo</span>(obj.<span class=\"hljs-property\">foo</span>);<br><span class=\"hljs-built_in\">setTimeout</span>(obj.<span class=\"hljs-property\">foo</span>, <span class=\"hljs-number\">1000</span>) <span class=\"hljs-comment\">// 隐式丢失： 情况2</span><br><br><span class=\"hljs-comment\">// name is:  kira</span><br><span class=\"hljs-comment\">// name is:  window</span><br><span class=\"hljs-comment\">// name is:  window</span><br><span class=\"hljs-comment\">// name is:  window</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"显示绑定\"><a href=\"#显示绑定\" class=\"headerlink\" title=\"显示绑定\"></a>显示绑定</h2><p>显示绑定是指给函数直接指定上下文参数（<code>context</code>）。显示绑定有4种方式：</p>\n<ul>\n<li><p><code>call</code></p>\n</li>\n<li><p><code>apply</code></p>\n</li>\n<li><p><code>bind</code> ：关于<code>bind</code>绑定，要注意以下2点：</p>\n<ul>\n<li>使用<code>bind</code>绑定过的函数，只有使用<code>new</code>方法调用才可以更改函数的<code>this</code>值</li>\n</ul>\n</li>\n<li><p><code>js</code>内置函数中的参数传递：例如数组原型方法中的可选参数<code>context</code>，会把<strong>回调函数</strong> [ 非箭头函数 ] 的<code>this</code>指向传入的<code>context</code></p>\n</li>\n<li><p>这4种方式中，关于指定的<code>context</code> 的类型，<code>this</code>的指向：</p>\n<ul>\n<li><code>undefined</code>  <code>null</code> : 指向全局对象</li>\n<li><code>string</code> <code>number</code> <code>bool</code> ：指向当前值类型的原型实例</li>\n<li><code>function</code>：指向函数本身</li>\n<li>引用类型 <code>object</code> <code>array</code>：指向引用对象</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// js中内置函数参数传递</span><br><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;context&#x27;</span>];<br>arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)&#125;, &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;非箭头函数&#x27;</span>&#125;);<br>arr.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)&#125;, &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;箭头函数&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"1.png\" alt=\"显示绑定：数组传入上下文\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 传入各种类型的context</span><br><span class=\"hljs-comment\">// call, apply, bind, 内置函数中的参数传递同理</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getContext</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前函数的上下文对象 this是：&#x27;</span>, <span class=\"hljs-variable language_\">this</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fnContext</span>(<span class=\"hljs-params\"></span>)&#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;fnContext函数作为上下文对象&#x27;</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-string\">&#x27;array&#x27;</span>, <span class=\"hljs-string\">&#x27;context&#x27;</span>];<br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;objContext&#x27;</span><br>&#125;<br><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">// window</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">null</span>) <span class=\"hljs-comment\">// window</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-comment\">// String</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-number\">123</span>) <span class=\"hljs-comment\">// Number</span><br>getContext.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">true</span>) <span class=\"hljs-comment\">// Boolean</span><br>getContext.<span class=\"hljs-title function_\">call</span>(fnContext) <span class=\"hljs-comment\">// fnContext</span><br>getContext.<span class=\"hljs-title function_\">call</span>(arr) <span class=\"hljs-comment\">// arr</span><br>getContext.<span class=\"hljs-title function_\">call</span>(obj) <span class=\"hljs-comment\">// obj</span><br></code></pre></td></tr></table></figure>\n<p>控制台打印结果：<br><img src=\"2.png\" alt=\"传入各种类型的上下文\"></p>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p><code>new</code> 操作符的步骤<br><img src=\"3.png\" alt=\"new操作步骤\"></p>\n<p>注意，使用<code>new</code>创建对象时，如果构造函数返回的是引用类型，则<code>new</code>操作生成的对象会被这个引用类型取代。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Foo</span>(<span class=\"hljs-params\">value</span>)&#123;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;foo&#x27;</span>;<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;<br>    <span class=\"hljs-keyword\">return</span> value;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> obj = &#123;<span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;object&#x27;</span>&#125;;<br><span class=\"hljs-keyword\">let</span> arr = [];<br><span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;this is a function&#x27;</span>)&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>());<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-literal\">null</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-literal\">undefined</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-number\">1</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-literal\">true</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-string\">&#x27;string&#x27;</span>));<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(obj), obj);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(arr), arr);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(fn), fn);<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"7.png\" alt=\"new创建对象，构造函数返回不同类型时的结果\"></p>\n<h1 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h1><h2 id=\"箭头函数this对象\"><a href=\"#箭头函数this对象\" class=\"headerlink\" title=\"箭头函数this对象\"></a>箭头函数<code>this</code>对象</h2><p>箭头函数没有<code>this</code>对象，或者说箭头函数的<code>this</code>对象早在词法分析时就已经被“绑定”为上层词法作用域（也就是函数声明时所在的作用域）的<code>this</code>了。</p>\n<p>例如下面这个例子：</p>\n<ol>\n<li>当<code>outer</code>调用时，<code>this</code>对象被绑定为<code>obj</code>；</li>\n<li>因为箭头函数是在<code>outer</code>方法中声明的，所以此时返回的箭头函数的<code>this</code>被“绑定”为<code>outer</code>实际执行时的<code>this</code>对象。所以无论该箭头函数在何处被调用，都不会发生改变。</li>\n<li>而如果返回的是普通函数，那么该函数的<code>this</code>对象就会根据调用方式而发生变化。<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outer</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">arrowFn</span> = (<span class=\"hljs-params\"></span>) =&gt; &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前在global环境下调用箭头函数，this：&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">let</span> fn = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;当前在global环境下调用普通函数，this：&#x27;</span>, <span class=\"hljs-variable language_\">this</span>)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> [arrowFn, fn];<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> obj = &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;obj&#x27;</span> &#125;;<br><span class=\"hljs-keyword\">let</span> obj1 = &#123;<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;obj1&#x27;</span>&#125;;<br><span class=\"hljs-comment\">// 将outer的this绑定为obj</span><br><span class=\"hljs-keyword\">let</span> [arrowFn, fn] = outer.<span class=\"hljs-title function_\">call</span>(obj);<br><span class=\"hljs-title function_\">arrowFn</span>();<br><span class=\"hljs-title function_\">fn</span>();<br><br><span class=\"hljs-comment\">//绑定this</span><br>arrowFn.<span class=\"hljs-title function_\">call</span>(obj1);<br>fn.<span class=\"hljs-title function_\">call</span>(obj1);<br></code></pre></td></tr></table></figure>\n控制台打印</li>\n</ol>\n<p><img src=\"8.png\" alt=\"箭头函数与普通函数的this值对比\"></p>\n<h2 id=\"箭头函数与普通函数的区别\"><a href=\"#箭头函数与普通函数的区别\" class=\"headerlink\" title=\"箭头函数与普通函数的区别\"></a>箭头函数与普通函数的区别</h2><p>（1）箭头函数的 <code>this</code> 值等于<strong>箭头函数</strong>在<strong>声明</strong>时所在的<strong>上层函数</strong>在<strong>调用</strong>时所绑定的<code>this</code>值。示例如上。</p>\n<p>（2）箭头函数没有自己的 <code>this</code> <code>prototype</code> <code>arguments</code> <code>super</code> 和 <code>new.target</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 箭头函数和普通函数</span><br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">arrowFn</span> = (<span class=\"hljs-params\">arg1</span>) =&gt; &#123;&#125;;<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\">arg1</span>)&#123;&#125;;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(arrowFn)<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">dir</span>(fn)<br></code></pre></td></tr></table></figure>\n<p>控制台打印：</p>\n<p><img src=\"4.png\" alt=\"箭头函数没有this等属性\"></p>\n<p>（3）箭头函数的不能用作构造函数</p>\n<p><img src=\"5.png\" alt=\"new一个箭头函数会报错\"></p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li><p>对 <code>this</code> 对象的理解<br>this 是一个引用，指向当前函数的调用对象。对于非箭头函数来说，</p>\n<ol>\n<li>当独立调用函数时，<code>this</code>指向全局对象；</li>\n<li>当函数作为对象的方法调用时，<code>this</code>指向这个当前对象；</li>\n<li>当函数以<code>call</code>，<code>apply</code>，<code>bind</code>调用，或者对于一些内置的函数例如数组的<code>forEach</code>，<code>map</code>方法，传入指定的上下文对象时，<code>this</code>指向绑定的上下文对象。其中根据传入的上下文对象类型，<code>this</code>会指向不同的对象：<ol>\n<li>如果传入是<code>null</code>或者<code>undefined</code>，则this指向全局对象；</li>\n<li>如果传入的是<code>number</code>, <code>string</code>, <code>boolean</code>值，js会将当前值实例化，并将<code>this</code>指向其实例。（根据当前基本类型的原型对象创建实例，并将当前值作为value参数传入构造函数）；</li>\n<li>如果传入的是函数，则会指向函数对象本身；</li>\n<li>如果传入的是引用类型，则直接指向该引用对象。</li>\n</ol>\n</li>\n<li>如果用<code>new</code>调用函数，则<code>this</code>会指向该函数原型的实例对象。</li>\n</ol>\n</li>\n<li><p>箭头函数和普通函数的区别？<br>箭头函数没有自己的 <code>this</code> <code>arguments</code> <code>prototype</code> <code>super</code>和<code>new.target</code> 以及箭头函数不能作为构造函数使用</p>\n</li>\n<li><p>箭头函数的 <code>this</code> 指向哪里？<br>箭头函数的this等于其函数<strong>声明</strong>时所在的<strong>上级函数被调用</strong>时的<code>this</code></p>\n</li>\n<li><p>如果<code>new</code> 一个箭头函数，会发生什么？<br>会报错，提示箭头函数没有构造函数</p>\n</li>\n</ol>\n"},{"title":"BFC","date":"2023-02-28T14:03:56.000Z","_content":"# 什么是BFC？\n在了解BFC之前，先了解一下FC的定义。**FC**（Formatting Context 格式化上下文），FC指定了页面中一块独立区域的渲染规则，这个渲染规则可以理解为内部元素的布局规则。不同的FC有不同的规则定义。\n\n目前网页中几种FC的分类：\n\n- **IFC**（Inline Formatting Context）：行级格式化上下文\n- **BFC**（Block Formatting Context）：块格式化上下文\n    - 更多关于IFC / BFC的定义参考：[CSS 2.1 Visual formatting model：Section 9.4](https://www.w3.org/TR/CSS2/visuren.html#normal-flow)\n- **FFC**（Flex Formatting Context）：自适应格式化上下文\n    - 更多关于自适应布局的定义参考 ：[Flexible Box Layout Module Level 1](https://drafts.csswg.org/css-flexbox-1/#flex-formatting-context)\n- **GFC**（Grid Formatting Context）：网格布局格式化上下文\n\n\n# BFC的触发条件\n在以下几种情况下，会触发形成BFC：\n- 根元素`HTML`\n- 浮动元素：`float` 属性不为`none`\n- `position`定位：设置为 `absolute` 、`fixed`\n- `overflow` 属性：设置为非`visible` 、`clip`的**块**元素\n- `display`属性：\n    - 设置为 `table`类型：\n        - `table`：对应`<table>`\n        - `table-caption`：HTML 表格标题默认值\n        - `table-row`：对应`<tr>`\n        - `table-row-group`：`<tbody>`\n        - `table-header-group`：`<thead>`\n        - `table-footer-group`：`<tfoot>`\n        - `table-cell`：HTML 表格单元格默认值\n        - `inline-table`\n    - 设置为`inline-block`\n    - 设置为`flow-root`\n    - 设置为`flex`类型：父元素display属性为`flex` 或者 `inline-flex`，其子元素内部的布局规则为BFC（其子元素本身非`table`类型、`grid`类型、`flex`类型）\n    - 设置为`grid`类型：父元素display属性为`gird` 或者 `inline-grid`，其子元素内部的布局规则为BFC（其子元素本身非`table`类型、`grid`类型、`flex`类型）\n- `contain` 属性：\n    - `layout`\n    - `content`\n    - `paint`\n- *多列容器（暂时没有搞懂）*\n\n# BFC渲染规则\n- 渲染隔离：一个BFC是页面上的一个隔离的独立容器，容器里面的子元素的排版布局不会直接影响到外面的元素（可能通过子元素影响父元素容器大小间接影响外部元素布局）。\n- 容器大小计算：区域大小由内部元素的边界确定：\n    - 即一个BFC容器会包裹所有的子元素块，无论该子元素是否是浮动元素，所以BFC的高度计算会包含`float`元素。\n- `margin`重叠：\n    - 在同一个BFC中，相邻元素形成的`box`的上下`margin`产生重叠；\n    - 但在不同的BFC中，各自的子元素的`margin`不重叠。\n- 排布方向：\n    - 内部的子元素由上到下依次排布。\n    - 内部子元素根据书写方向（`writing-mode`）确定从左开始排布还是从右开始排布。\n    - 起始位置的子元素的`margin`紧贴父容器的`border`（只有起始方向的`margin`紧贴）。\n- 当前的BFC不与外部的`float box`重叠。\n\n# 实例验证\n## 1、容器大小计算\n区域大小由内部元素的边界确定，高度计算包含`float`元素\n当不给父容器设置高度的情况下，查看父容器的高度是如何计算的：\n```html\n <!-- bfc的高度计算会包含float子元素 可以用作清除内部浮动 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>BFC</title>\n    <style>\n        .bfc {\n            display: flow-root;\n        }\n        .container {\n            border: 1px solid #939393;\n            background: #f2f2f2;\n            margin-bottom: 20px;\n        }\n        .float {\n            float: left;\n            background-color: #e98f53;\n        }\n        .child {\n            height: 40px;\n            width: 40px;\n        }  \n    </style>\n</head>\n\n<body>\n\t  <!-- 父容器非BFC -->\n    <div class=\"container\">\n        <div class=\"float child\"></div>\n    </div>\n\n\t\t<!-- 父容器是BFC -->\n    <div class=\"bfc container\" style=\"margin-top: 100px\">\n        <div class=\"float child\"></div>\n    </div>\n</body>\n</html>\n```\n\n![](1.png)\n\n## 2、margin重叠\n同一个BFC中相邻的元素上下`margin`重叠\n当给子元素设置\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>BFC</title>\n    <style>\n        .bfc {\n            display: flow-root;\n        }\n        .container {\n            border: 1px solid #939393;\n            background: #f2f2f2;\n        }\n       .bfc-child {\n            height: 40px;\n            margin: 30px 0;\n            background-color: #ccc;\n       }\n    </style>\n</head>\n\n<body>\n\t<div class=\"bfc container\">\n        <div class=\"bfc-child\"></div>\n    </div>\n    <div class=\"bfc container\">\n        <div class=\"bfc-child\"></div>\n        <div class=\"bfc-child\"></div>\n    </div>\n</body>\n</html>\n```\n\n![](2.png)\n\n相反，当父容器非BFC时，所有子元素（无论是否是平级）都会发生上下`margin`重叠。\n将上面父容器的display属性改为`contents` ：\n\n```css\n.bfc{\n\tdisplay: contents;\n}\n```\n\n![](3.png)\n\n> contents\n> These elements don't produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. \n> \n> 当设置元素为content时，该元素不会生成自己的box，而是会被子元素生成的box取代。\n> \n\n会发现此时处于两个父级下的子元素，上下`margin`也会发生重叠。此时因为父容器不是BFC，没有渲染隔离，所有子元素生成的盒子被平铺到了最外层。\n\n## 3、当前的BFC不与外部的`float box`重叠\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BFC</title>\n    <style>\n\t     .bfc {\n            display: flow-root;\n        }\n        .float {\n            float: left;\n            background-color: #e98f53;\n            height: 40px;\n            width: 40px;\n        }\n        .aside {\n            width: 200px;\n            height: 200px;\n            background-color: #696fa7;\n        }\n    </style>\n</head>\n\n<body>\n    <!-- 规则三：bfc区域不和浮动元素重叠 -->\n    <div class=\"float\"></div>\n    <div class=\"aside\">该元素非BFC，则该元素和小黄块重叠</div>\n\n    <div class=\"float\"></div>\n    <div class=\"aside bfc\">该元素BFC，则该元素和小黄块不重叠</div>\n\n</body>\n\n</html>\n\n```\n\n![](4.png)\n\n# BFC的作用\n\n利用BFC的渲染规则，可以实现以下几个功能：\n- 自适应两栏布局\n- 阻止元素被浮动元素覆盖\n- 清除内部浮动\n- 阻止`margin`重叠：分属于不同的BFC时不发生重叠\n\n后面三条在实验中以及实现过了，但是针对第一条，如何利用BFC实现两栏布局呢？\n\n利用2个特性：\n1. 块级元素`width:auto` 时，会自动拉伸至父元素左右边界处（横向占满）。\n2. BFC渲染规则：当前的BFC不与外部的`float box`重叠。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BFC</title>\n    <style>\n        .bfc {\n            display: flow-root;\n        }\n\t\t\t\t.container {\n            border: 1px solid #939393;\n            background: #f2f2f2;\n            margin-bottom: 20px;\n        }\n        .main{\n            height: 300px;\n            background: #ddd;\n        }\n        .float-aside{\n            width: 100px;\n            height: 150px;\n            float: left;\n            background: #757575;\n        }\n    </style>\n</head>\n\n<body>\n    <!-- 利用bfc区域不和浮动元素重叠的特性，实现自适应两栏布局 -->\n    <div class=\"bfc container\">\n        <div class=\"float-aside\"></div>\n        <div class=\"bfc main\">设置float的宽度，然后给相邻的bfc元素不设置宽度，块级元素默认宽度为auto，那么该bfc元素会自动延伸到父元素的最右端</div>\n    </div>\n</body>\n</html>\n```\n\n![](5.png)\n\n# 参考\n[[布局概念] 关于CSS-BFC深入理解](https://juejin.cn/post/6844903476774830094)\n[CSS Display Module Level 4](https://drafts.csswg.org/css-display/#formatting-context)\n\n","source":"_posts/BFC.md","raw":"---\ntitle: BFC\ndate: 2023-02-28 22:03:56\ncategory: [Web前端, CSS]\ntags: <span class=\"label label-primary\">BFC</span> <span class=\"label label-primary\">CSS渲染</span>\n---\n# 什么是BFC？\n在了解BFC之前，先了解一下FC的定义。**FC**（Formatting Context 格式化上下文），FC指定了页面中一块独立区域的渲染规则，这个渲染规则可以理解为内部元素的布局规则。不同的FC有不同的规则定义。\n\n目前网页中几种FC的分类：\n\n- **IFC**（Inline Formatting Context）：行级格式化上下文\n- **BFC**（Block Formatting Context）：块格式化上下文\n    - 更多关于IFC / BFC的定义参考：[CSS 2.1 Visual formatting model：Section 9.4](https://www.w3.org/TR/CSS2/visuren.html#normal-flow)\n- **FFC**（Flex Formatting Context）：自适应格式化上下文\n    - 更多关于自适应布局的定义参考 ：[Flexible Box Layout Module Level 1](https://drafts.csswg.org/css-flexbox-1/#flex-formatting-context)\n- **GFC**（Grid Formatting Context）：网格布局格式化上下文\n\n\n# BFC的触发条件\n在以下几种情况下，会触发形成BFC：\n- 根元素`HTML`\n- 浮动元素：`float` 属性不为`none`\n- `position`定位：设置为 `absolute` 、`fixed`\n- `overflow` 属性：设置为非`visible` 、`clip`的**块**元素\n- `display`属性：\n    - 设置为 `table`类型：\n        - `table`：对应`<table>`\n        - `table-caption`：HTML 表格标题默认值\n        - `table-row`：对应`<tr>`\n        - `table-row-group`：`<tbody>`\n        - `table-header-group`：`<thead>`\n        - `table-footer-group`：`<tfoot>`\n        - `table-cell`：HTML 表格单元格默认值\n        - `inline-table`\n    - 设置为`inline-block`\n    - 设置为`flow-root`\n    - 设置为`flex`类型：父元素display属性为`flex` 或者 `inline-flex`，其子元素内部的布局规则为BFC（其子元素本身非`table`类型、`grid`类型、`flex`类型）\n    - 设置为`grid`类型：父元素display属性为`gird` 或者 `inline-grid`，其子元素内部的布局规则为BFC（其子元素本身非`table`类型、`grid`类型、`flex`类型）\n- `contain` 属性：\n    - `layout`\n    - `content`\n    - `paint`\n- *多列容器（暂时没有搞懂）*\n\n# BFC渲染规则\n- 渲染隔离：一个BFC是页面上的一个隔离的独立容器，容器里面的子元素的排版布局不会直接影响到外面的元素（可能通过子元素影响父元素容器大小间接影响外部元素布局）。\n- 容器大小计算：区域大小由内部元素的边界确定：\n    - 即一个BFC容器会包裹所有的子元素块，无论该子元素是否是浮动元素，所以BFC的高度计算会包含`float`元素。\n- `margin`重叠：\n    - 在同一个BFC中，相邻元素形成的`box`的上下`margin`产生重叠；\n    - 但在不同的BFC中，各自的子元素的`margin`不重叠。\n- 排布方向：\n    - 内部的子元素由上到下依次排布。\n    - 内部子元素根据书写方向（`writing-mode`）确定从左开始排布还是从右开始排布。\n    - 起始位置的子元素的`margin`紧贴父容器的`border`（只有起始方向的`margin`紧贴）。\n- 当前的BFC不与外部的`float box`重叠。\n\n# 实例验证\n## 1、容器大小计算\n区域大小由内部元素的边界确定，高度计算包含`float`元素\n当不给父容器设置高度的情况下，查看父容器的高度是如何计算的：\n```html\n <!-- bfc的高度计算会包含float子元素 可以用作清除内部浮动 -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>BFC</title>\n    <style>\n        .bfc {\n            display: flow-root;\n        }\n        .container {\n            border: 1px solid #939393;\n            background: #f2f2f2;\n            margin-bottom: 20px;\n        }\n        .float {\n            float: left;\n            background-color: #e98f53;\n        }\n        .child {\n            height: 40px;\n            width: 40px;\n        }  \n    </style>\n</head>\n\n<body>\n\t  <!-- 父容器非BFC -->\n    <div class=\"container\">\n        <div class=\"float child\"></div>\n    </div>\n\n\t\t<!-- 父容器是BFC -->\n    <div class=\"bfc container\" style=\"margin-top: 100px\">\n        <div class=\"float child\"></div>\n    </div>\n</body>\n</html>\n```\n\n![](1.png)\n\n## 2、margin重叠\n同一个BFC中相邻的元素上下`margin`重叠\n当给子元素设置\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <title>BFC</title>\n    <style>\n        .bfc {\n            display: flow-root;\n        }\n        .container {\n            border: 1px solid #939393;\n            background: #f2f2f2;\n        }\n       .bfc-child {\n            height: 40px;\n            margin: 30px 0;\n            background-color: #ccc;\n       }\n    </style>\n</head>\n\n<body>\n\t<div class=\"bfc container\">\n        <div class=\"bfc-child\"></div>\n    </div>\n    <div class=\"bfc container\">\n        <div class=\"bfc-child\"></div>\n        <div class=\"bfc-child\"></div>\n    </div>\n</body>\n</html>\n```\n\n![](2.png)\n\n相反，当父容器非BFC时，所有子元素（无论是否是平级）都会发生上下`margin`重叠。\n将上面父容器的display属性改为`contents` ：\n\n```css\n.bfc{\n\tdisplay: contents;\n}\n```\n\n![](3.png)\n\n> contents\n> These elements don't produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. \n> \n> 当设置元素为content时，该元素不会生成自己的box，而是会被子元素生成的box取代。\n> \n\n会发现此时处于两个父级下的子元素，上下`margin`也会发生重叠。此时因为父容器不是BFC，没有渲染隔离，所有子元素生成的盒子被平铺到了最外层。\n\n## 3、当前的BFC不与外部的`float box`重叠\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BFC</title>\n    <style>\n\t     .bfc {\n            display: flow-root;\n        }\n        .float {\n            float: left;\n            background-color: #e98f53;\n            height: 40px;\n            width: 40px;\n        }\n        .aside {\n            width: 200px;\n            height: 200px;\n            background-color: #696fa7;\n        }\n    </style>\n</head>\n\n<body>\n    <!-- 规则三：bfc区域不和浮动元素重叠 -->\n    <div class=\"float\"></div>\n    <div class=\"aside\">该元素非BFC，则该元素和小黄块重叠</div>\n\n    <div class=\"float\"></div>\n    <div class=\"aside bfc\">该元素BFC，则该元素和小黄块不重叠</div>\n\n</body>\n\n</html>\n\n```\n\n![](4.png)\n\n# BFC的作用\n\n利用BFC的渲染规则，可以实现以下几个功能：\n- 自适应两栏布局\n- 阻止元素被浮动元素覆盖\n- 清除内部浮动\n- 阻止`margin`重叠：分属于不同的BFC时不发生重叠\n\n后面三条在实验中以及实现过了，但是针对第一条，如何利用BFC实现两栏布局呢？\n\n利用2个特性：\n1. 块级元素`width:auto` 时，会自动拉伸至父元素左右边界处（横向占满）。\n2. BFC渲染规则：当前的BFC不与外部的`float box`重叠。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BFC</title>\n    <style>\n        .bfc {\n            display: flow-root;\n        }\n\t\t\t\t.container {\n            border: 1px solid #939393;\n            background: #f2f2f2;\n            margin-bottom: 20px;\n        }\n        .main{\n            height: 300px;\n            background: #ddd;\n        }\n        .float-aside{\n            width: 100px;\n            height: 150px;\n            float: left;\n            background: #757575;\n        }\n    </style>\n</head>\n\n<body>\n    <!-- 利用bfc区域不和浮动元素重叠的特性，实现自适应两栏布局 -->\n    <div class=\"bfc container\">\n        <div class=\"float-aside\"></div>\n        <div class=\"bfc main\">设置float的宽度，然后给相邻的bfc元素不设置宽度，块级元素默认宽度为auto，那么该bfc元素会自动延伸到父元素的最右端</div>\n    </div>\n</body>\n</html>\n```\n\n![](5.png)\n\n# 参考\n[[布局概念] 关于CSS-BFC深入理解](https://juejin.cn/post/6844903476774830094)\n[CSS Display Module Level 4](https://drafts.csswg.org/css-display/#formatting-context)\n\n","slug":"BFC","published":1,"updated":"2023-02-28T14:09:18.021Z","_id":"cleobkvye0000lpdf34wsh6hz","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是BFC？\"><a href=\"#什么是BFC？\" class=\"headerlink\" title=\"什么是BFC？\"></a>什么是BFC？</h1><p>在了解BFC之前，先了解一下FC的定义。<strong>FC</strong>（Formatting Context 格式化上下文），FC指定了页面中一块独立区域的渲染规则，这个渲染规则可以理解为内部元素的布局规则。不同的FC有不同的规则定义。</p>\n<p>目前网页中几种FC的分类：</p>\n<ul>\n<li><strong>IFC</strong>（Inline Formatting Context）：行级格式化上下文</li>\n<li><strong>BFC</strong>（Block Formatting Context）：块格式化上下文<ul>\n<li>更多关于IFC / BFC的定义参考：<a href=\"https://www.w3.org/TR/CSS2/visuren.html#normal-flow\">CSS 2.1 Visual formatting model：Section 9.4</a></li>\n</ul>\n</li>\n<li><strong>FFC</strong>（Flex Formatting Context）：自适应格式化上下文<ul>\n<li>更多关于自适应布局的定义参考 ：<a href=\"https://drafts.csswg.org/css-flexbox-1/#flex-formatting-context\">Flexible Box Layout Module Level 1</a></li>\n</ul>\n</li>\n<li><strong>GFC</strong>（Grid Formatting Context）：网格布局格式化上下文</li>\n</ul>\n<h1 id=\"BFC的触发条件\"><a href=\"#BFC的触发条件\" class=\"headerlink\" title=\"BFC的触发条件\"></a>BFC的触发条件</h1><p>在以下几种情况下，会触发形成BFC：</p>\n<ul>\n<li>根元素<code>HTML</code></li>\n<li>浮动元素：<code>float</code> 属性不为<code>none</code></li>\n<li><code>position</code>定位：设置为 <code>absolute</code> 、<code>fixed</code></li>\n<li><code>overflow</code> 属性：设置为非<code>visible</code> 、<code>clip</code>的<strong>块</strong>元素</li>\n<li><code>display</code>属性：<ul>\n<li>设置为 <code>table</code>类型：<ul>\n<li><code>table</code>：对应<code>&lt;table&gt;</code></li>\n<li><code>table-caption</code>：HTML 表格标题默认值</li>\n<li><code>table-row</code>：对应<code>&lt;tr&gt;</code></li>\n<li><code>table-row-group</code>：<code>&lt;tbody&gt;</code></li>\n<li><code>table-header-group</code>：<code>&lt;thead&gt;</code></li>\n<li><code>table-footer-group</code>：<code>&lt;tfoot&gt;</code></li>\n<li><code>table-cell</code>：HTML 表格单元格默认值</li>\n<li><code>inline-table</code></li>\n</ul>\n</li>\n<li>设置为<code>inline-block</code></li>\n<li>设置为<code>flow-root</code></li>\n<li>设置为<code>flex</code>类型：父元素display属性为<code>flex</code> 或者 <code>inline-flex</code>，其子元素内部的布局规则为BFC（其子元素本身非<code>table</code>类型、<code>grid</code>类型、<code>flex</code>类型）</li>\n<li>设置为<code>grid</code>类型：父元素display属性为<code>gird</code> 或者 <code>inline-grid</code>，其子元素内部的布局规则为BFC（其子元素本身非<code>table</code>类型、<code>grid</code>类型、<code>flex</code>类型）</li>\n</ul>\n</li>\n<li><code>contain</code> 属性：<ul>\n<li><code>layout</code></li>\n<li><code>content</code></li>\n<li><code>paint</code></li>\n</ul>\n</li>\n<li><em>多列容器（暂时没有搞懂）</em></li>\n</ul>\n<h1 id=\"BFC渲染规则\"><a href=\"#BFC渲染规则\" class=\"headerlink\" title=\"BFC渲染规则\"></a>BFC渲染规则</h1><ul>\n<li>渲染隔离：一个BFC是页面上的一个隔离的独立容器，容器里面的子元素的排版布局不会直接影响到外面的元素（可能通过子元素影响父元素容器大小间接影响外部元素布局）。</li>\n<li>容器大小计算：区域大小由内部元素的边界确定：<ul>\n<li>即一个BFC容器会包裹所有的子元素块，无论该子元素是否是浮动元素，所以BFC的高度计算会包含<code>float</code>元素。</li>\n</ul>\n</li>\n<li><code>margin</code>重叠：<ul>\n<li>在同一个BFC中，相邻元素形成的<code>box</code>的上下<code>margin</code>产生重叠；</li>\n<li>但在不同的BFC中，各自的子元素的<code>margin</code>不重叠。</li>\n</ul>\n</li>\n<li>排布方向：<ul>\n<li>内部的子元素由上到下依次排布。</li>\n<li>内部子元素根据书写方向（<code>writing-mode</code>）确定从左开始排布还是从右开始排布。</li>\n<li>起始位置的子元素的<code>margin</code>紧贴父容器的<code>border</code>（只有起始方向的<code>margin</code>紧贴）。</li>\n</ul>\n</li>\n<li>当前的BFC不与外部的<code>float box</code>重叠。</li>\n</ul>\n<h1 id=\"实例验证\"><a href=\"#实例验证\" class=\"headerlink\" title=\"实例验证\"></a>实例验证</h1><h2 id=\"1、容器大小计算\"><a href=\"#1、容器大小计算\" class=\"headerlink\" title=\"1、容器大小计算\"></a>1、容器大小计算</h2><p>区域大小由内部元素的边界确定，高度计算包含<code>float</code>元素<br>当不给父容器设置高度的情况下，查看父容器的高度是如何计算的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"> <span class=\"hljs-comment\">&lt;!-- bfc的高度计算会包含float子元素 可以用作清除内部浮动 --&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#939393</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f2f2f2</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.float</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e98f53</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.child</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">        &#125;  </span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t  <span class=\"hljs-comment\">&lt;!-- 父容器非BFC --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>\t\t<span class=\"hljs-comment\">&lt;!-- 父容器是BFC --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 100px&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"1.png\"></p>\n<h2 id=\"2、margin重叠\"><a href=\"#2、margin重叠\" class=\"headerlink\" title=\"2、margin重叠\"></a>2、margin重叠</h2><p>同一个BFC中相邻的元素上下<code>margin</code>重叠<br>当给子元素设置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#939393</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f2f2f2</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">       <span class=\"hljs-selector-class\">.bfc-child</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ccc</span>;</span><br><span class=\"language-css\">       &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc-child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc-child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc-child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"2.png\"></p>\n<p>相反，当父容器非BFC时，所有子元素（无论是否是平级）都会发生上下<code>margin</code>重叠。<br>将上面父容器的display属性改为<code>contents</code> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.bfc</span>&#123;<br>\t<span class=\"hljs-attribute\">display</span>: contents;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"3.png\"></p>\n<blockquote>\n<p>contents<br>These elements don’t produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. </p>\n<p>当设置元素为content时，该元素不会生成自己的box，而是会被子元素生成的box取代。</p>\n</blockquote>\n<p>会发现此时处于两个父级下的子元素，上下<code>margin</code>也会发生重叠。此时因为父容器不是BFC，没有渲染隔离，所有子元素生成的盒子被平铺到了最外层。</p>\n<h2 id=\"3、当前的BFC不与外部的float-box重叠\"><a href=\"#3、当前的BFC不与外部的float-box重叠\" class=\"headerlink\" title=\"3、当前的BFC不与外部的float box重叠\"></a>3、当前的BFC不与外部的<code>float box</code>重叠</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">\t     <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.float</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e98f53</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.aside</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#696fa7</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 规则三：bfc区域不和浮动元素重叠 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aside&quot;</span>&gt;</span>该元素非BFC，则该元素和小黄块重叠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aside bfc&quot;</span>&gt;</span>该元素BFC，则该元素和小黄块不重叠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"4.png\"></p>\n<h1 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h1><p>利用BFC的渲染规则，可以实现以下几个功能：</p>\n<ul>\n<li>自适应两栏布局</li>\n<li>阻止元素被浮动元素覆盖</li>\n<li>清除内部浮动</li>\n<li>阻止<code>margin</code>重叠：分属于不同的BFC时不发生重叠</li>\n</ul>\n<p>后面三条在实验中以及实现过了，但是针对第一条，如何利用BFC实现两栏布局呢？</p>\n<p>利用2个特性：</p>\n<ol>\n<li>块级元素<code>width:auto</code> 时，会自动拉伸至父元素左右边界处（横向占满）。</li>\n<li>BFC渲染规则：当前的BFC不与外部的<code>float box</code>重叠。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">\t\t\t\t<span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#939393</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f2f2f2</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.main</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ddd</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.float-aside</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#757575</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 利用bfc区域不和浮动元素重叠的特性，实现自适应两栏布局 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float-aside&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc main&quot;</span>&gt;</span>设置float的宽度，然后给相邻的bfc元素不设置宽度，块级元素默认宽度为auto，那么该bfc元素会自动延伸到父元素的最右端<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"5.png\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.cn/post/6844903476774830094\">[布局概念] 关于CSS-BFC深入理解</a><br><a href=\"https://drafts.csswg.org/css-display/#formatting-context\">CSS Display Module Level 4</a></p>\n","site":{"data":{"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}}},"excerpt":"","more":"<h1 id=\"什么是BFC？\"><a href=\"#什么是BFC？\" class=\"headerlink\" title=\"什么是BFC？\"></a>什么是BFC？</h1><p>在了解BFC之前，先了解一下FC的定义。<strong>FC</strong>（Formatting Context 格式化上下文），FC指定了页面中一块独立区域的渲染规则，这个渲染规则可以理解为内部元素的布局规则。不同的FC有不同的规则定义。</p>\n<p>目前网页中几种FC的分类：</p>\n<ul>\n<li><strong>IFC</strong>（Inline Formatting Context）：行级格式化上下文</li>\n<li><strong>BFC</strong>（Block Formatting Context）：块格式化上下文<ul>\n<li>更多关于IFC / BFC的定义参考：<a href=\"https://www.w3.org/TR/CSS2/visuren.html#normal-flow\">CSS 2.1 Visual formatting model：Section 9.4</a></li>\n</ul>\n</li>\n<li><strong>FFC</strong>（Flex Formatting Context）：自适应格式化上下文<ul>\n<li>更多关于自适应布局的定义参考 ：<a href=\"https://drafts.csswg.org/css-flexbox-1/#flex-formatting-context\">Flexible Box Layout Module Level 1</a></li>\n</ul>\n</li>\n<li><strong>GFC</strong>（Grid Formatting Context）：网格布局格式化上下文</li>\n</ul>\n<h1 id=\"BFC的触发条件\"><a href=\"#BFC的触发条件\" class=\"headerlink\" title=\"BFC的触发条件\"></a>BFC的触发条件</h1><p>在以下几种情况下，会触发形成BFC：</p>\n<ul>\n<li>根元素<code>HTML</code></li>\n<li>浮动元素：<code>float</code> 属性不为<code>none</code></li>\n<li><code>position</code>定位：设置为 <code>absolute</code> 、<code>fixed</code></li>\n<li><code>overflow</code> 属性：设置为非<code>visible</code> 、<code>clip</code>的<strong>块</strong>元素</li>\n<li><code>display</code>属性：<ul>\n<li>设置为 <code>table</code>类型：<ul>\n<li><code>table</code>：对应<code>&lt;table&gt;</code></li>\n<li><code>table-caption</code>：HTML 表格标题默认值</li>\n<li><code>table-row</code>：对应<code>&lt;tr&gt;</code></li>\n<li><code>table-row-group</code>：<code>&lt;tbody&gt;</code></li>\n<li><code>table-header-group</code>：<code>&lt;thead&gt;</code></li>\n<li><code>table-footer-group</code>：<code>&lt;tfoot&gt;</code></li>\n<li><code>table-cell</code>：HTML 表格单元格默认值</li>\n<li><code>inline-table</code></li>\n</ul>\n</li>\n<li>设置为<code>inline-block</code></li>\n<li>设置为<code>flow-root</code></li>\n<li>设置为<code>flex</code>类型：父元素display属性为<code>flex</code> 或者 <code>inline-flex</code>，其子元素内部的布局规则为BFC（其子元素本身非<code>table</code>类型、<code>grid</code>类型、<code>flex</code>类型）</li>\n<li>设置为<code>grid</code>类型：父元素display属性为<code>gird</code> 或者 <code>inline-grid</code>，其子元素内部的布局规则为BFC（其子元素本身非<code>table</code>类型、<code>grid</code>类型、<code>flex</code>类型）</li>\n</ul>\n</li>\n<li><code>contain</code> 属性：<ul>\n<li><code>layout</code></li>\n<li><code>content</code></li>\n<li><code>paint</code></li>\n</ul>\n</li>\n<li><em>多列容器（暂时没有搞懂）</em></li>\n</ul>\n<h1 id=\"BFC渲染规则\"><a href=\"#BFC渲染规则\" class=\"headerlink\" title=\"BFC渲染规则\"></a>BFC渲染规则</h1><ul>\n<li>渲染隔离：一个BFC是页面上的一个隔离的独立容器，容器里面的子元素的排版布局不会直接影响到外面的元素（可能通过子元素影响父元素容器大小间接影响外部元素布局）。</li>\n<li>容器大小计算：区域大小由内部元素的边界确定：<ul>\n<li>即一个BFC容器会包裹所有的子元素块，无论该子元素是否是浮动元素，所以BFC的高度计算会包含<code>float</code>元素。</li>\n</ul>\n</li>\n<li><code>margin</code>重叠：<ul>\n<li>在同一个BFC中，相邻元素形成的<code>box</code>的上下<code>margin</code>产生重叠；</li>\n<li>但在不同的BFC中，各自的子元素的<code>margin</code>不重叠。</li>\n</ul>\n</li>\n<li>排布方向：<ul>\n<li>内部的子元素由上到下依次排布。</li>\n<li>内部子元素根据书写方向（<code>writing-mode</code>）确定从左开始排布还是从右开始排布。</li>\n<li>起始位置的子元素的<code>margin</code>紧贴父容器的<code>border</code>（只有起始方向的<code>margin</code>紧贴）。</li>\n</ul>\n</li>\n<li>当前的BFC不与外部的<code>float box</code>重叠。</li>\n</ul>\n<h1 id=\"实例验证\"><a href=\"#实例验证\" class=\"headerlink\" title=\"实例验证\"></a>实例验证</h1><h2 id=\"1、容器大小计算\"><a href=\"#1、容器大小计算\" class=\"headerlink\" title=\"1、容器大小计算\"></a>1、容器大小计算</h2><p>区域大小由内部元素的边界确定，高度计算包含<code>float</code>元素<br>当不给父容器设置高度的情况下，查看父容器的高度是如何计算的：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"> <span class=\"hljs-comment\">&lt;!-- bfc的高度计算会包含float子元素 可以用作清除内部浮动 --&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#939393</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f2f2f2</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.float</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e98f53</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.child</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">        &#125;  </span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t  <span class=\"hljs-comment\">&lt;!-- 父容器非BFC --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>\t\t<span class=\"hljs-comment\">&lt;!-- 父容器是BFC --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;margin-top: 100px&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"1.png\"></p>\n<h2 id=\"2、margin重叠\"><a href=\"#2、margin重叠\" class=\"headerlink\" title=\"2、margin重叠\"></a>2、margin重叠</h2><p>同一个BFC中相邻的元素上下<code>margin</code>重叠<br>当给子元素设置</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#939393</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f2f2f2</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">       <span class=\"hljs-selector-class\">.bfc-child</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#ccc</span>;</span><br><span class=\"language-css\">       &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc-child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc-child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc-child&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"2.png\"></p>\n<p>相反，当父容器非BFC时，所有子元素（无论是否是平级）都会发生上下<code>margin</code>重叠。<br>将上面父容器的display属性改为<code>contents</code> ：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.bfc</span>&#123;<br>\t<span class=\"hljs-attribute\">display</span>: contents;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"3.png\"></p>\n<blockquote>\n<p>contents<br>These elements don’t produce a specific box by themselves. They are replaced by their pseudo-box and their child boxes. </p>\n<p>当设置元素为content时，该元素不会生成自己的box，而是会被子元素生成的box取代。</p>\n</blockquote>\n<p>会发现此时处于两个父级下的子元素，上下<code>margin</code>也会发生重叠。此时因为父容器不是BFC，没有渲染隔离，所有子元素生成的盒子被平铺到了最外层。</p>\n<h2 id=\"3、当前的BFC不与外部的float-box重叠\"><a href=\"#3、当前的BFC不与外部的float-box重叠\" class=\"headerlink\" title=\"3、当前的BFC不与外部的float box重叠\"></a>3、当前的BFC不与外部的<code>float box</code>重叠</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">\t     <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.float</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#e98f53</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">40px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.aside</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">200px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#696fa7</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 规则三：bfc区域不和浮动元素重叠 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aside&quot;</span>&gt;</span>该元素非BFC，则该元素和小黄块重叠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;aside bfc&quot;</span>&gt;</span>该元素BFC，则该元素和小黄块不重叠<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"4.png\"></p>\n<h1 id=\"BFC的作用\"><a href=\"#BFC的作用\" class=\"headerlink\" title=\"BFC的作用\"></a>BFC的作用</h1><p>利用BFC的渲染规则，可以实现以下几个功能：</p>\n<ul>\n<li>自适应两栏布局</li>\n<li>阻止元素被浮动元素覆盖</li>\n<li>清除内部浮动</li>\n<li>阻止<code>margin</code>重叠：分属于不同的BFC时不发生重叠</li>\n</ul>\n<p>后面三条在实验中以及实现过了，但是针对第一条，如何利用BFC实现两栏布局呢？</p>\n<p>利用2个特性：</p>\n<ol>\n<li>块级元素<code>width:auto</code> 时，会自动拉伸至父元素左右边界处（横向占满）。</li>\n<li>BFC渲染规则：当前的BFC不与外部的<code>float box</code>重叠。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>BFC<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\"></span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.bfc</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">display</span>: flow-root;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">\t\t\t\t<span class=\"hljs-selector-class\">.container</span> &#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#939393</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#f2f2f2</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.main</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">300px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ddd</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">        <span class=\"hljs-selector-class\">.float-aside</span>&#123;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">150px</span>;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">float</span>: left;</span><br><span class=\"language-css\">            <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#757575</span>;</span><br><span class=\"language-css\">        &#125;</span><br><span class=\"language-css\">    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 利用bfc区域不和浮动元素重叠的特性，实现自适应两栏布局 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc container&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;float-aside&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;bfc main&quot;</span>&gt;</span>设置float的宽度，然后给相邻的bfc元素不设置宽度，块级元素默认宽度为auto，那么该bfc元素会自动延伸到父元素的最右端<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p><img src=\"5.png\"></p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.cn/post/6844903476774830094\">[布局概念] 关于CSS-BFC深入理解</a><br><a href=\"https://drafts.csswg.org/css-display/#formatting-context\">CSS Display Module Level 4</a></p>\n"},{"title":"浏览器同源策略","date":"2023-02-28T14:12:38.000Z","_content":"# 同源策略\n## 什么是同源策略\n同源策略是一个重要的**安全策略**，它用于**限制**一个源（origin）的文档或者它加载的脚本如何能与另一个源的资源进行**交互**。非同源下的文档和脚本（JS），不能跨域获取资源。\n\n其中**同源**是指：\n\n- 协议相同\n- 域名相同\n- 端口相同\n\n## 为什么会存在同源策略\n\n同源策略是**浏览器**为了**保护用户信息安全**所执行的策略。1995年由 Netscape 公司引入的，目前所有的**浏览器**都执行这个策略。\n\n因为它的主要目的是为了保证用户信息安全，所以只要涉及到用户信息的获取途径都会被**限制**，这些信息获取途径包括：\n\n- 通过操作**其他网站**或者 **iframe**的 `dom` 来获取用户的表单数据\n- 通过获取`cookie`，`localstorge`，`sessionstorage`，`indexDB`等缓存信息，来获取用户信息\n- 通过发送 `ajax / fetch` 请求，来获取后端的用户信息（提交表单不受跨域限制）\n\n如果不对这些途径加以限制，就可能被恶意网站盗取用户信息。那么恶意是如何通过这几种途径获取信息的呢？举几个案例（来源于[彻底理解浏览器的跨域](https://juejin.im/post/6844903816060469262)）：\n\n> 案例：\n> 一、cookie获取发送请求\n> A 网站是一家银行，用户登录以后，A 网站在用户的机器上设置了一个 Cookie，包含了一些隐私信息（比如存款总额）。用户离开 A 网站以后，又去访问 B 网站，如果没有同源限制，B 网站可以读取 A 网站的 Cookie，那么隐私信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。\n> 例如\n>\n> 1. 用户登录了自己的银行页面 [http://mybank.com](http://mybank.com/)，[mybank.com](https://www.notion.so/b4dda8a6ca0b4a308ed8dd5d5f77861a) 向用户的cookie中添加用户标识。\n> 2. 用户浏览了恶意页面 [evil.com](http://evil.com/)。执行了页面中的恶意AJAX请求代码。\n> 3. 向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n> 4. 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n> 5. 而且由于Ajax在后台执行，用户无法感知这一过程。\n>\n> 二、dom操作\n>\n> 1. 做一个假网站，里面用iframe嵌套一个银行网站 [mybank.com](http://mybank.com/)。\n> 2. 把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。\n> 3. 这时如果用户输入账号密码，我们的主网站可以跨域访问到http://mybank.com的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击\n\n\n\n所以针对这三点，浏览器做了同源限制：\n\n- 无法获取跨域缓存：`cookie` `localstorge` `indexDB` 等\n\n- 无法访问非同源网页的 DOM （iframe）。\n- 无法向非同源地址发送 AJAX 请求 或 Fetch 请求（可以发送，但浏览器拒绝接受响应）。\n\n\n\n总结一下：\n\n同源策略实际就是浏览器为了保证用户信息安全的策略，限制只有同源的文档或者脚本才能进行交互。其中同源是指**协议**、**域名**、**端口**三点相同。通过限制用户（一般是指开发者）通过操作dom、获取缓存信息以及发送ajax / fetch 请求等方式来获取用户信息来保证用户信息安全。\n\n# 解决跨域通信\n\n我们在开发中，避免不了要跨域获取信息，其中最常见的就是发送跨域请求（`ajax / fetch`）来获取资源。那么解决跨域通信问题就成了我们的日常。根据浏览器的同源限制，我们将解决跨域通信分为2个方向：\n\n- 针对**跨域的网络请求**，需要前后端配合操作来解决，主要方法包括：\n    - CORS\n    - JSONP\n    - 服务器代理\n- 针对DOM级别的操作，我们只需要通过前端解决，主要方法包括：\n    - `postMassage`（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）\n    - `document.domain`（只能用于一、二级域名都相同的情况）\n\n| 通信侧 | 方法 |\n| --- | --- |\n| 前端 | `postMassage`（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）、<br />`document.domain`（只能用于一、二级域名都相同的情况） |\n| 前后端 | `CORS`、`jsonp`、服务器代理 |\n\n## CORS\n\nCORS（**跨域资源共享  Cross-origin resource sharing）**是W3C标准，它允许浏览器向跨域服务器发出请求，解决了**同源限制中AJAX 请求无法跨域**的问题。这种跨域通信解决方案不需要用户做额外的操作，是浏览器和服务器共同实现的。\n\n在浏览器端，不需要用户额外配置，当用户在浏览器发送AJAX请求（例如在js代码中发起了ajax请求），浏览器会自动处理HTTP请求，同时会对服务器端返回的响应进行拦截处理，判断该响应是否同源，进而决定是返回正常的响应还是抛出错误。\n\n而服务器则需要手动配置CORS接口，实现对跨域请求的处理。常用的**服务器CORS配置字段**如下：\n\n| 协议头参数 | 说明 | 是否必须 | 备注 |\n| ---- | ---- | -- | :-- |\n| `Access-Control-Allow-Origin` | 表示允许跨域请求的域 值为：<br />- 通配符`*`：接受任何域的跨域访问<br />`<origin>`：指定一个来源（只能指定一个）<br />`null` ：指定来源为 `null` <br />此时实际上就是不接受跨域，但是不推荐设置为该值。<br />因为浏览器在进行`CORS`判定时只会判断`Access-Control-Allow-Origin`字段是否存在而不会判断该字段的值，所以设置为`null`会导致安全问题 | T |  |\n| `Access-Control-Allow-Methods` | 服务器允许跨域请求的 `http` 方法列表 | T | 响应预检请求时，必须包含 |\n| `Access-Control-Allow-Headers` | 列出了服务器支持的所有头信息字段，<br />这些字段可以用于预检请求的`Access-Control-Request-Headers` | F | 当预请求（`OPTIONS`）中包含`Access-Control-Request-Headers`时，服务器必须设置该字段配置 |\n| `Access-Control-Allow-Credentials` | 表示是否允许发送Cookie，只有一个可选值：true（必为小写）。<br />如果不发送cookie，则直接省略，不写为false | F | CORS请求默认不发送`Cookie`和HTTP认证信息<br />要携带这些信息，需要发送方和服务器配置<br />服务器配置：<br />- `Access-Control-Allow-Credentials`为`true`<br />- `Access-Control-Allow-Origin`不能为`*`，必须指定域名<br />发送方（JS）:<br/>开发者必须在AJAX请求中打开`withCredentials`属性 |\n| `Access-Control-Max-Age` | 以秒为单位的缓存时间在有效时间内，<br />浏览器无须为同一请求再次发起预检请求 | F |  |\n\n在Nginx中的配置：\n\n```yaml\nlocation / {  \n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\t\tadd_header Access-Control-Allow-Credentials 'true';\n\t\tadd_header Access-Control-Max-Age 86400;\n}\n```\n\n## CORS的判定流程\n\nCORS基本判定流程如图所示，主要分为三个阶段：\n\n1. **浏览器发起请求**：处理请求头，增加`Origin`字段\n2. **服务器处理请求，并返回响应**：服务器接收请求，根据当前服务器的CORS配置决定是否在响应头中写入`Access-Control-Allow-Origin`，并返回正常HTTP响应（注意，因为这里无论是否接收跨域请求，服务器都会返回一个正常HTTP响应，所以无法通过状态码来判断跨域请求是否成功）：\n    1. 服务器已配置CORS，写入该字段\n    2. 服务器未配置CORS，不写入该字段\n3. **浏览器处理响应**：检查响应头是否存在`Access-Control-Allow-Origin`：\n    1. 存在，服务器不允许跨域，浏览器抛出错误，错误类型为：`No 'Access-Control-Allow-Origin' header is present on the requested resource.`\n    2. 不存在，浏览器进一步比对该值是否包含当前域的值：\n        1. 包含，服务器同意该源的跨域请求，浏览器正常返回响应\n        2. 不包含，服务器允许跨域请求，但拒绝当前源的请求，浏览器抛出错误，错误类型为：`The 'Access-Control-Allow-Origin' header has a value '[http://xxx.com](http://xxx.com/)' that is not equal to the supplied origin.`\n\n![CORS判定流程图](3.png)\n\n在这三个阶段中，根据**请求类型（**简单请求 / 非简单请求）的不同，具体的流程处理和操作也会不一致。\n\n## 简单请求和非简单请求\n\n什么是简单请求和非简单请求呢？实际上这个可以理解为根据当前请求的信息载量来进行区分的。对于信息载量较少的就是简单请求，信息载量多的就是非简单请求。对于这两种请求类型，有明确的定义。\n\n### 简单请求\n\n1. 使用 `GET、POST、HEAD` 其中一种请求方法。\n2. HTTP的头信息不超出以下几种字段：\n- `Accept`\n- `Accept-Language`\n- `Content-Language`\n- `Last-Event-ID`\n- `Content-Type`：只限于三个值 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain`\n    - 这三个值也是直接用表单提交可以设置的值\n1. `XMLHttpRequestUpload`：\n    1. 请求中的任意`XMLHttpRequestUpload` 对象均没有注册任何事件监听器；\n    2. `XMLHttpRequestUpload` 对象可以使用 `XMLHttpRequest.upload` 属性访问。 \n2. 请求中没有使用 `ReadableStream` 对象。\n\n对于简单请求类型，整个CORS流程没什么变化（如上图一致），浏览器在第一阶段处理请求时，会直接在当前请求的请求头中增加`Origin`字段然后发送给服务器。\n\n![简单请求流程图示](1.png)\n\n\n### 非简单请求\n\n除了简单请求，其他的都是非简单请求。\n\n非简单请求的流程有所不同。对于非简单请求，浏览器会在正式通信之前，增加一次HTTP查询请求，称为“预检“请求（preflight）。只有通过了预检请求，浏览器才会发出正式通信。这里预检请求的方法是`OPTIONS` 。一次非简单请求的流程如下：\n\n- 浏览器发起`OPTIONS`请求：当浏览器发现当前的请求是非简单请求，会先发起`OPTIONS` 请求。在`OPTIONS`的请求头中增加3个字段：\n    - `Origin`\n    - `Access-Control-Request-Method`：列出浏览器的**正式请求**中会用到的HTTP方法。\n    - `Access-Control-Request-Headers`：指定浏览器的**正式请求**中会额外需要发送哪些头信息字段。\n- 服务器接收`OPTIONS`请求，返回响应：服务器收到请求后，会检查服务器的CORS配置和请求头中CORS字段，决定如何返回响应：\n    - 服务器**未配置CORS接口 or** 服务器配置的CORS接口和请求头中的**CORS字段不匹配**：服务器**否定**此次预检请求，返回正常的HTTP响应，响应头中不包含CORS相关字段`（未配置 || 不匹配 ⇒ 否定：不包含）`。\n    - 服务器**已配置 and** 配置的CORS接口和请求头的**CORS字段匹配**：服务器**肯定**此次预检请求，返回正常的HTTP响应，响应头中包含CORS相关字段`（配置 && 匹配 ⇒ 肯定：包含）`；\n- 浏览器处理响应：当浏览器接收到服务器的响应之后，检查响应头是否包含CORS相关字段：\n    - 不包含，浏览器抛出错误\n    - 包含，服务器肯定此次预检请求，浏览器发出正式的`CORS`请求获取数据，这个正式的CORS请求的流程和简单请求一致。\n\n![非简单请求流程图示](2.png)\n\n下面列出了CORS请求中会用到的协议头字段以及说明：\n\n| 协议头参数 | 类型 | 说明 | 是否必须 | 备注 |\n| --- | --- | --- | --- | --- |\n| `Origin` | 请求头 | 该字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。 | T |  |\n| `Access-Control-Request-Method` | 请求头 | 该字段用于预检请求，指名浏览器正式的CORS请求会用到的HTTP方法 | T | 发送预检请求时，必须包含 |\n| `Access-Control-Request-Headers` | 请求头 | 该字段用于预检请求，指名浏览器正式的CORS请求会额外发送的头信息字段 | T | 发送预检请求时，必须包含 |\n| `Access-Control-Allow-Origin` | 响应头 | （同服务器配置字段含义） | T |  |\n| `Access-Control-Expose-Headers` | 响应头 | 该字段指明服务器允许哪些响应头可以暴露给浏览器中运行的脚本（JS），以响应跨源请求。<br />在没有额外指明的情况下，CORS请求时，XMLHttpRequest对象的`getResponseHeader()`方法只能拿到6个基本字段：<br />`Cache-Control`、`Content-Language`、`Content-Type`、`Expires`、`Last-Modified`、`Pragma`。<br/>如果想拿到其他字段，就必须在`Access-Control-Expose-Headers`里面指定。 |F||\n| `Access-Control-Allow-Methods` | 响应头 | （同服务器配置字段含义） | T |  |\n| `Access-Control-Allow-Headers` | 响应头 | （同服务器配置字段含义） | F |  |\n| `Access-Control-Allow-Credentials` | 响应头 | （同服务器配置字段含义） | F |  |\n| `Access-Control-Max-Age` | 响应头 | （同服务器配置字段含义） | F |  |\n\n## JSONP\n\nJSONP 的原理就是利用 `<script>` 标签的 src 属性没有跨域的限制，通过指向一个需要访问的地址，由服务端返回一个预先定义好的 Javascript 函数的调用，并且将服务器数据以该函数参数的形式传递过来，此方法需要前后端配合完成。\n\n- `script`标签 src可跨域\n- 将回调方法作为get参数传给后端\n- 后端返回一个js，调用这个回调，并把数据传给回调\n\n```jsx\n//定义获取数据的回调方法\nfunction getData(data) {\n  console.log(data);\n}\n\n// 创建一个script标签，并且告诉后端回调函数名叫 getData\nvar body = document.getElementsByTagName('body')[0];\nvar script = document.gerElement('script');\nscript.type = 'text/javasctipt';\nscript.src = 'demo.js?callback=getData';\nbody.appendChild(script);\n\n//script 加载完毕之后从页面中删除,否则每次点击生成许多script标签\nscript.onload = function () {\n  document.body.removeChild(script);\n}\n```\n\n\n\n## 服务器代理\n\n浏览器对网络请求做了处理，所以通过从浏览器端发送的请求都会有跨域限制，但是服务器请求服务器就不存在这个问题。所以可以搭建一个代理服务器，将前端资源和代理服务器部署到一个域下，然后前端请求代理服务器，再通过代理服务器转发请求，从而实现请求跨域。\n\n\n\n## document.domain\n\n该方式只能用于二级域名相同的情况下，比如 `a.test.com` 和 `b.test.com` 适用于该方式。\n\n只需要给两个页面都添加 `document.domain = 'test.com'`，通过在 `a.test.com` 创建一个 `iframe`，去控制 `iframe` 的 `window`，从而进行交互。\n\n\n\n## postMessage\n\nwindow.postMessage 是一个 HTML5 的 api，允许两个窗口之间进行跨域发送消息。\n\n这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息\n\n```jsx\n// 发送消息端\nvar receiver = document.getElementById('receiver').contentWindow;\nvar btn = document.getElementById('send');\nbtn.addEventListener('click', function (e) {\n    e.preventDefault();\n    var val = document.getElementById('text').value;\n    receiver.postMessage(\"Hello \"+val+\"！\", \"http://res.42du.cn\");\n}); \n\n// 接收消息端\nwindow.addEventListener(\"message\", receiveMessage, false);\nfunction receiveMessage(event){\n  if (event.origin !== \"http://www.42du.cn\")\n    return;\n}\n```\n\n# 需要跨域请求的情况\n\n- 由 [XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 或者 [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) 发起的跨源 HTTP 请求。\n- Web 字体 (CSS 中通过`@font-face`使用跨源字体资源)，[因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)。\n- [WebGL 贴图](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL)\n- 使用 `drawImage` 将 `Images/video` 画面绘制到 `canvas`\n\n\n# 参考\n[彻底理解浏览器的跨域](https://juejin.im/post/6844903816060469262)\n[跨域资源共享 CORS 详解](https://www.ruanyifeng.com/blog/2016/04/cors.html)\n[你真的会使用XMLHttpRequest吗？](https://segmentfault.com/a/1190000004322487)\n[跨源资源共享（CORS）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n[九种跨域方式实现原理（完整版）](https://juejin.cn/post/6844903767226351623)\n\n\n\n\n","source":"_posts/浏览器同源策略.md","raw":"---\ntitle: 浏览器同源策略\ndate: 2023-02-28 22:12:38\ncategory: [浏览器原理]\ntags: <span class=\"label label-primary\">浏览器安全</span> <span class=\"label label-primary\">CORS</span>\n---\n# 同源策略\n## 什么是同源策略\n同源策略是一个重要的**安全策略**，它用于**限制**一个源（origin）的文档或者它加载的脚本如何能与另一个源的资源进行**交互**。非同源下的文档和脚本（JS），不能跨域获取资源。\n\n其中**同源**是指：\n\n- 协议相同\n- 域名相同\n- 端口相同\n\n## 为什么会存在同源策略\n\n同源策略是**浏览器**为了**保护用户信息安全**所执行的策略。1995年由 Netscape 公司引入的，目前所有的**浏览器**都执行这个策略。\n\n因为它的主要目的是为了保证用户信息安全，所以只要涉及到用户信息的获取途径都会被**限制**，这些信息获取途径包括：\n\n- 通过操作**其他网站**或者 **iframe**的 `dom` 来获取用户的表单数据\n- 通过获取`cookie`，`localstorge`，`sessionstorage`，`indexDB`等缓存信息，来获取用户信息\n- 通过发送 `ajax / fetch` 请求，来获取后端的用户信息（提交表单不受跨域限制）\n\n如果不对这些途径加以限制，就可能被恶意网站盗取用户信息。那么恶意是如何通过这几种途径获取信息的呢？举几个案例（来源于[彻底理解浏览器的跨域](https://juejin.im/post/6844903816060469262)）：\n\n> 案例：\n> 一、cookie获取发送请求\n> A 网站是一家银行，用户登录以后，A 网站在用户的机器上设置了一个 Cookie，包含了一些隐私信息（比如存款总额）。用户离开 A 网站以后，又去访问 B 网站，如果没有同源限制，B 网站可以读取 A 网站的 Cookie，那么隐私信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。\n> 例如\n>\n> 1. 用户登录了自己的银行页面 [http://mybank.com](http://mybank.com/)，[mybank.com](https://www.notion.so/b4dda8a6ca0b4a308ed8dd5d5f77861a) 向用户的cookie中添加用户标识。\n> 2. 用户浏览了恶意页面 [evil.com](http://evil.com/)。执行了页面中的恶意AJAX请求代码。\n> 3. 向http://mybank.com发起AJAX HTTP请求，请求会默认把http://mybank.com对应cookie也同时发送过去。\n> 4. 银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。\n> 5. 而且由于Ajax在后台执行，用户无法感知这一过程。\n>\n> 二、dom操作\n>\n> 1. 做一个假网站，里面用iframe嵌套一个银行网站 [mybank.com](http://mybank.com/)。\n> 2. 把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。\n> 3. 这时如果用户输入账号密码，我们的主网站可以跨域访问到http://mybank.com的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击\n\n\n\n所以针对这三点，浏览器做了同源限制：\n\n- 无法获取跨域缓存：`cookie` `localstorge` `indexDB` 等\n\n- 无法访问非同源网页的 DOM （iframe）。\n- 无法向非同源地址发送 AJAX 请求 或 Fetch 请求（可以发送，但浏览器拒绝接受响应）。\n\n\n\n总结一下：\n\n同源策略实际就是浏览器为了保证用户信息安全的策略，限制只有同源的文档或者脚本才能进行交互。其中同源是指**协议**、**域名**、**端口**三点相同。通过限制用户（一般是指开发者）通过操作dom、获取缓存信息以及发送ajax / fetch 请求等方式来获取用户信息来保证用户信息安全。\n\n# 解决跨域通信\n\n我们在开发中，避免不了要跨域获取信息，其中最常见的就是发送跨域请求（`ajax / fetch`）来获取资源。那么解决跨域通信问题就成了我们的日常。根据浏览器的同源限制，我们将解决跨域通信分为2个方向：\n\n- 针对**跨域的网络请求**，需要前后端配合操作来解决，主要方法包括：\n    - CORS\n    - JSONP\n    - 服务器代理\n- 针对DOM级别的操作，我们只需要通过前端解决，主要方法包括：\n    - `postMassage`（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）\n    - `document.domain`（只能用于一、二级域名都相同的情况）\n\n| 通信侧 | 方法 |\n| --- | --- |\n| 前端 | `postMassage`（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）、<br />`document.domain`（只能用于一、二级域名都相同的情况） |\n| 前后端 | `CORS`、`jsonp`、服务器代理 |\n\n## CORS\n\nCORS（**跨域资源共享  Cross-origin resource sharing）**是W3C标准，它允许浏览器向跨域服务器发出请求，解决了**同源限制中AJAX 请求无法跨域**的问题。这种跨域通信解决方案不需要用户做额外的操作，是浏览器和服务器共同实现的。\n\n在浏览器端，不需要用户额外配置，当用户在浏览器发送AJAX请求（例如在js代码中发起了ajax请求），浏览器会自动处理HTTP请求，同时会对服务器端返回的响应进行拦截处理，判断该响应是否同源，进而决定是返回正常的响应还是抛出错误。\n\n而服务器则需要手动配置CORS接口，实现对跨域请求的处理。常用的**服务器CORS配置字段**如下：\n\n| 协议头参数 | 说明 | 是否必须 | 备注 |\n| ---- | ---- | -- | :-- |\n| `Access-Control-Allow-Origin` | 表示允许跨域请求的域 值为：<br />- 通配符`*`：接受任何域的跨域访问<br />`<origin>`：指定一个来源（只能指定一个）<br />`null` ：指定来源为 `null` <br />此时实际上就是不接受跨域，但是不推荐设置为该值。<br />因为浏览器在进行`CORS`判定时只会判断`Access-Control-Allow-Origin`字段是否存在而不会判断该字段的值，所以设置为`null`会导致安全问题 | T |  |\n| `Access-Control-Allow-Methods` | 服务器允许跨域请求的 `http` 方法列表 | T | 响应预检请求时，必须包含 |\n| `Access-Control-Allow-Headers` | 列出了服务器支持的所有头信息字段，<br />这些字段可以用于预检请求的`Access-Control-Request-Headers` | F | 当预请求（`OPTIONS`）中包含`Access-Control-Request-Headers`时，服务器必须设置该字段配置 |\n| `Access-Control-Allow-Credentials` | 表示是否允许发送Cookie，只有一个可选值：true（必为小写）。<br />如果不发送cookie，则直接省略，不写为false | F | CORS请求默认不发送`Cookie`和HTTP认证信息<br />要携带这些信息，需要发送方和服务器配置<br />服务器配置：<br />- `Access-Control-Allow-Credentials`为`true`<br />- `Access-Control-Allow-Origin`不能为`*`，必须指定域名<br />发送方（JS）:<br/>开发者必须在AJAX请求中打开`withCredentials`属性 |\n| `Access-Control-Max-Age` | 以秒为单位的缓存时间在有效时间内，<br />浏览器无须为同一请求再次发起预检请求 | F |  |\n\n在Nginx中的配置：\n\n```yaml\nlocation / {  \n    add_header Access-Control-Allow-Origin *;\n    add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';\n    add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\n\t\tadd_header Access-Control-Allow-Credentials 'true';\n\t\tadd_header Access-Control-Max-Age 86400;\n}\n```\n\n## CORS的判定流程\n\nCORS基本判定流程如图所示，主要分为三个阶段：\n\n1. **浏览器发起请求**：处理请求头，增加`Origin`字段\n2. **服务器处理请求，并返回响应**：服务器接收请求，根据当前服务器的CORS配置决定是否在响应头中写入`Access-Control-Allow-Origin`，并返回正常HTTP响应（注意，因为这里无论是否接收跨域请求，服务器都会返回一个正常HTTP响应，所以无法通过状态码来判断跨域请求是否成功）：\n    1. 服务器已配置CORS，写入该字段\n    2. 服务器未配置CORS，不写入该字段\n3. **浏览器处理响应**：检查响应头是否存在`Access-Control-Allow-Origin`：\n    1. 存在，服务器不允许跨域，浏览器抛出错误，错误类型为：`No 'Access-Control-Allow-Origin' header is present on the requested resource.`\n    2. 不存在，浏览器进一步比对该值是否包含当前域的值：\n        1. 包含，服务器同意该源的跨域请求，浏览器正常返回响应\n        2. 不包含，服务器允许跨域请求，但拒绝当前源的请求，浏览器抛出错误，错误类型为：`The 'Access-Control-Allow-Origin' header has a value '[http://xxx.com](http://xxx.com/)' that is not equal to the supplied origin.`\n\n![CORS判定流程图](3.png)\n\n在这三个阶段中，根据**请求类型（**简单请求 / 非简单请求）的不同，具体的流程处理和操作也会不一致。\n\n## 简单请求和非简单请求\n\n什么是简单请求和非简单请求呢？实际上这个可以理解为根据当前请求的信息载量来进行区分的。对于信息载量较少的就是简单请求，信息载量多的就是非简单请求。对于这两种请求类型，有明确的定义。\n\n### 简单请求\n\n1. 使用 `GET、POST、HEAD` 其中一种请求方法。\n2. HTTP的头信息不超出以下几种字段：\n- `Accept`\n- `Accept-Language`\n- `Content-Language`\n- `Last-Event-ID`\n- `Content-Type`：只限于三个值 `application/x-www-form-urlencoded`、`multipart/form-data`、`text/plain`\n    - 这三个值也是直接用表单提交可以设置的值\n1. `XMLHttpRequestUpload`：\n    1. 请求中的任意`XMLHttpRequestUpload` 对象均没有注册任何事件监听器；\n    2. `XMLHttpRequestUpload` 对象可以使用 `XMLHttpRequest.upload` 属性访问。 \n2. 请求中没有使用 `ReadableStream` 对象。\n\n对于简单请求类型，整个CORS流程没什么变化（如上图一致），浏览器在第一阶段处理请求时，会直接在当前请求的请求头中增加`Origin`字段然后发送给服务器。\n\n![简单请求流程图示](1.png)\n\n\n### 非简单请求\n\n除了简单请求，其他的都是非简单请求。\n\n非简单请求的流程有所不同。对于非简单请求，浏览器会在正式通信之前，增加一次HTTP查询请求，称为“预检“请求（preflight）。只有通过了预检请求，浏览器才会发出正式通信。这里预检请求的方法是`OPTIONS` 。一次非简单请求的流程如下：\n\n- 浏览器发起`OPTIONS`请求：当浏览器发现当前的请求是非简单请求，会先发起`OPTIONS` 请求。在`OPTIONS`的请求头中增加3个字段：\n    - `Origin`\n    - `Access-Control-Request-Method`：列出浏览器的**正式请求**中会用到的HTTP方法。\n    - `Access-Control-Request-Headers`：指定浏览器的**正式请求**中会额外需要发送哪些头信息字段。\n- 服务器接收`OPTIONS`请求，返回响应：服务器收到请求后，会检查服务器的CORS配置和请求头中CORS字段，决定如何返回响应：\n    - 服务器**未配置CORS接口 or** 服务器配置的CORS接口和请求头中的**CORS字段不匹配**：服务器**否定**此次预检请求，返回正常的HTTP响应，响应头中不包含CORS相关字段`（未配置 || 不匹配 ⇒ 否定：不包含）`。\n    - 服务器**已配置 and** 配置的CORS接口和请求头的**CORS字段匹配**：服务器**肯定**此次预检请求，返回正常的HTTP响应，响应头中包含CORS相关字段`（配置 && 匹配 ⇒ 肯定：包含）`；\n- 浏览器处理响应：当浏览器接收到服务器的响应之后，检查响应头是否包含CORS相关字段：\n    - 不包含，浏览器抛出错误\n    - 包含，服务器肯定此次预检请求，浏览器发出正式的`CORS`请求获取数据，这个正式的CORS请求的流程和简单请求一致。\n\n![非简单请求流程图示](2.png)\n\n下面列出了CORS请求中会用到的协议头字段以及说明：\n\n| 协议头参数 | 类型 | 说明 | 是否必须 | 备注 |\n| --- | --- | --- | --- | --- |\n| `Origin` | 请求头 | 该字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。 | T |  |\n| `Access-Control-Request-Method` | 请求头 | 该字段用于预检请求，指名浏览器正式的CORS请求会用到的HTTP方法 | T | 发送预检请求时，必须包含 |\n| `Access-Control-Request-Headers` | 请求头 | 该字段用于预检请求，指名浏览器正式的CORS请求会额外发送的头信息字段 | T | 发送预检请求时，必须包含 |\n| `Access-Control-Allow-Origin` | 响应头 | （同服务器配置字段含义） | T |  |\n| `Access-Control-Expose-Headers` | 响应头 | 该字段指明服务器允许哪些响应头可以暴露给浏览器中运行的脚本（JS），以响应跨源请求。<br />在没有额外指明的情况下，CORS请求时，XMLHttpRequest对象的`getResponseHeader()`方法只能拿到6个基本字段：<br />`Cache-Control`、`Content-Language`、`Content-Type`、`Expires`、`Last-Modified`、`Pragma`。<br/>如果想拿到其他字段，就必须在`Access-Control-Expose-Headers`里面指定。 |F||\n| `Access-Control-Allow-Methods` | 响应头 | （同服务器配置字段含义） | T |  |\n| `Access-Control-Allow-Headers` | 响应头 | （同服务器配置字段含义） | F |  |\n| `Access-Control-Allow-Credentials` | 响应头 | （同服务器配置字段含义） | F |  |\n| `Access-Control-Max-Age` | 响应头 | （同服务器配置字段含义） | F |  |\n\n## JSONP\n\nJSONP 的原理就是利用 `<script>` 标签的 src 属性没有跨域的限制，通过指向一个需要访问的地址，由服务端返回一个预先定义好的 Javascript 函数的调用，并且将服务器数据以该函数参数的形式传递过来，此方法需要前后端配合完成。\n\n- `script`标签 src可跨域\n- 将回调方法作为get参数传给后端\n- 后端返回一个js，调用这个回调，并把数据传给回调\n\n```jsx\n//定义获取数据的回调方法\nfunction getData(data) {\n  console.log(data);\n}\n\n// 创建一个script标签，并且告诉后端回调函数名叫 getData\nvar body = document.getElementsByTagName('body')[0];\nvar script = document.gerElement('script');\nscript.type = 'text/javasctipt';\nscript.src = 'demo.js?callback=getData';\nbody.appendChild(script);\n\n//script 加载完毕之后从页面中删除,否则每次点击生成许多script标签\nscript.onload = function () {\n  document.body.removeChild(script);\n}\n```\n\n\n\n## 服务器代理\n\n浏览器对网络请求做了处理，所以通过从浏览器端发送的请求都会有跨域限制，但是服务器请求服务器就不存在这个问题。所以可以搭建一个代理服务器，将前端资源和代理服务器部署到一个域下，然后前端请求代理服务器，再通过代理服务器转发请求，从而实现请求跨域。\n\n\n\n## document.domain\n\n该方式只能用于二级域名相同的情况下，比如 `a.test.com` 和 `b.test.com` 适用于该方式。\n\n只需要给两个页面都添加 `document.domain = 'test.com'`，通过在 `a.test.com` 创建一个 `iframe`，去控制 `iframe` 的 `window`，从而进行交互。\n\n\n\n## postMessage\n\nwindow.postMessage 是一个 HTML5 的 api，允许两个窗口之间进行跨域发送消息。\n\n这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息\n\n```jsx\n// 发送消息端\nvar receiver = document.getElementById('receiver').contentWindow;\nvar btn = document.getElementById('send');\nbtn.addEventListener('click', function (e) {\n    e.preventDefault();\n    var val = document.getElementById('text').value;\n    receiver.postMessage(\"Hello \"+val+\"！\", \"http://res.42du.cn\");\n}); \n\n// 接收消息端\nwindow.addEventListener(\"message\", receiveMessage, false);\nfunction receiveMessage(event){\n  if (event.origin !== \"http://www.42du.cn\")\n    return;\n}\n```\n\n# 需要跨域请求的情况\n\n- 由 [XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest) 或者 [Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) 发起的跨源 HTTP 请求。\n- Web 字体 (CSS 中通过`@font-face`使用跨源字体资源)，[因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用](https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements)。\n- [WebGL 贴图](https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL)\n- 使用 `drawImage` 将 `Images/video` 画面绘制到 `canvas`\n\n\n# 参考\n[彻底理解浏览器的跨域](https://juejin.im/post/6844903816060469262)\n[跨域资源共享 CORS 详解](https://www.ruanyifeng.com/blog/2016/04/cors.html)\n[你真的会使用XMLHttpRequest吗？](https://segmentfault.com/a/1190000004322487)\n[跨源资源共享（CORS）](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS)\n[九种跨域方式实现原理（完整版）](https://juejin.cn/post/6844903767226351623)\n\n\n\n\n","slug":"浏览器同源策略","published":1,"updated":"2023-02-28T14:18:03.523Z","_id":"cleobw292000rlpdfb3fl11h6","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h1><h2 id=\"什么是同源策略\"><a href=\"#什么是同源策略\" class=\"headerlink\" title=\"什么是同源策略\"></a>什么是同源策略</h2><p>同源策略是一个重要的<strong>安全策略</strong>，它用于<strong>限制</strong>一个源（origin）的文档或者它加载的脚本如何能与另一个源的资源进行<strong>交互</strong>。非同源下的文档和脚本（JS），不能跨域获取资源。</p>\n<p>其中<strong>同源</strong>是指：</p>\n<ul>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ul>\n<h2 id=\"为什么会存在同源策略\"><a href=\"#为什么会存在同源策略\" class=\"headerlink\" title=\"为什么会存在同源策略\"></a>为什么会存在同源策略</h2><p>同源策略是<strong>浏览器</strong>为了<strong>保护用户信息安全</strong>所执行的策略。1995年由 Netscape 公司引入的，目前所有的<strong>浏览器</strong>都执行这个策略。</p>\n<p>因为它的主要目的是为了保证用户信息安全，所以只要涉及到用户信息的获取途径都会被<strong>限制</strong>，这些信息获取途径包括：</p>\n<ul>\n<li>通过操作<strong>其他网站</strong>或者 <strong>iframe</strong>的 <code>dom</code> 来获取用户的表单数据</li>\n<li>通过获取<code>cookie</code>，<code>localstorge</code>，<code>sessionstorage</code>，<code>indexDB</code>等缓存信息，来获取用户信息</li>\n<li>通过发送 <code>ajax / fetch</code> 请求，来获取后端的用户信息（提交表单不受跨域限制）</li>\n</ul>\n<p>如果不对这些途径加以限制，就可能被恶意网站盗取用户信息。那么恶意是如何通过这几种途径获取信息的呢？举几个案例（来源于<a href=\"https://juejin.im/post/6844903816060469262\">彻底理解浏览器的跨域</a>）：</p>\n<blockquote>\n<p>案例：<br>一、cookie获取发送请求<br>A 网站是一家银行，用户登录以后，A 网站在用户的机器上设置了一个 Cookie，包含了一些隐私信息（比如存款总额）。用户离开 A 网站以后，又去访问 B 网站，如果没有同源限制，B 网站可以读取 A 网站的 Cookie，那么隐私信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>例如</p>\n<ol>\n<li>用户登录了自己的银行页面 <a href=\"http://mybank.com/\">http://mybank.com</a>，<a href=\"https://www.notion.so/b4dda8a6ca0b4a308ed8dd5d5f77861a\">mybank.com</a> 向用户的cookie中添加用户标识。</li>\n<li>用户浏览了恶意页面 <a href=\"http://evil.com/\">evil.com</a>。执行了页面中的恶意AJAX请求代码。</li>\n<li>向<a href=\"http://mybank.com发起ajax/\">http://mybank.com发起AJAX</a> HTTP请求，请求会默认把<a href=\"http://mybank.com对应cookie也同时发送过去./\">http://mybank.com对应cookie也同时发送过去。</a></li>\n<li>银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。</li>\n<li>而且由于Ajax在后台执行，用户无法感知这一过程。</li>\n</ol>\n<p>二、dom操作</p>\n<ol>\n<li>做一个假网站，里面用iframe嵌套一个银行网站 <a href=\"http://mybank.com/\">mybank.com</a>。</li>\n<li>把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li>\n<li>这时如果用户输入账号密码，我们的主网站可以跨域访问到<a href=\"http://mybank.com的dom节点,就可以拿到用户的输入了,那么就完成了一次攻击/\">http://mybank.com的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击</a></li>\n</ol>\n</blockquote>\n<p>所以针对这三点，浏览器做了同源限制：</p>\n<ul>\n<li><p>无法获取跨域缓存：<code>cookie</code> <code>localstorge</code> <code>indexDB</code> 等</p>\n</li>\n<li><p>无法访问非同源网页的 DOM （iframe）。</p>\n</li>\n<li><p>无法向非同源地址发送 AJAX 请求 或 Fetch 请求（可以发送，但浏览器拒绝接受响应）。</p>\n</li>\n</ul>\n<p>总结一下：</p>\n<p>同源策略实际就是浏览器为了保证用户信息安全的策略，限制只有同源的文档或者脚本才能进行交互。其中同源是指<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>三点相同。通过限制用户（一般是指开发者）通过操作dom、获取缓存信息以及发送ajax / fetch 请求等方式来获取用户信息来保证用户信息安全。</p>\n<h1 id=\"解决跨域通信\"><a href=\"#解决跨域通信\" class=\"headerlink\" title=\"解决跨域通信\"></a>解决跨域通信</h1><p>我们在开发中，避免不了要跨域获取信息，其中最常见的就是发送跨域请求（<code>ajax / fetch</code>）来获取资源。那么解决跨域通信问题就成了我们的日常。根据浏览器的同源限制，我们将解决跨域通信分为2个方向：</p>\n<ul>\n<li>针对<strong>跨域的网络请求</strong>，需要前后端配合操作来解决，主要方法包括：<ul>\n<li>CORS</li>\n<li>JSONP</li>\n<li>服务器代理</li>\n</ul>\n</li>\n<li>针对DOM级别的操作，我们只需要通过前端解决，主要方法包括：<ul>\n<li><code>postMassage</code>（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）</li>\n<li><code>document.domain</code>（只能用于一、二级域名都相同的情况）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>通信侧</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>前端</td>\n<td><code>postMassage</code>（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）、<br /><code>document.domain</code>（只能用于一、二级域名都相同的情况）</td>\n</tr>\n<tr>\n<td>前后端</td>\n<td><code>CORS</code>、<code>jsonp</code>、服务器代理</td>\n</tr>\n</tbody></table>\n<h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><p>CORS（<strong>跨域资源共享  Cross-origin resource sharing）</strong>是W3C标准，它允许浏览器向跨域服务器发出请求，解决了<strong>同源限制中AJAX 请求无法跨域</strong>的问题。这种跨域通信解决方案不需要用户做额外的操作，是浏览器和服务器共同实现的。</p>\n<p>在浏览器端，不需要用户额外配置，当用户在浏览器发送AJAX请求（例如在js代码中发起了ajax请求），浏览器会自动处理HTTP请求，同时会对服务器端返回的响应进行拦截处理，判断该响应是否同源，进而决定是返回正常的响应还是抛出错误。</p>\n<p>而服务器则需要手动配置CORS接口，实现对跨域请求的处理。常用的<strong>服务器CORS配置字段</strong>如下：</p>\n<table>\n<thead>\n<tr>\n<th>协议头参数</th>\n<th>说明</th>\n<th>是否必须</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Access-Control-Allow-Origin</code></td>\n<td>表示允许跨域请求的域 值为：<br />- 通配符<code>*</code>：接受任何域的跨域访问<br /><code>&lt;origin&gt;</code>：指定一个来源（只能指定一个）<br /><code>null</code> ：指定来源为 <code>null</code> <br />此时实际上就是不接受跨域，但是不推荐设置为该值。<br />因为浏览器在进行<code>CORS</code>判定时只会判断<code>Access-Control-Allow-Origin</code>字段是否存在而不会判断该字段的值，所以设置为<code>null</code>会导致安全问题</td>\n<td>T</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>服务器允许跨域请求的 <code>http</code> 方法列表</td>\n<td>T</td>\n<td align=\"left\">响应预检请求时，必须包含</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>列出了服务器支持的所有头信息字段，<br />这些字段可以用于预检请求的<code>Access-Control-Request-Headers</code></td>\n<td>F</td>\n<td align=\"left\">当预请求（<code>OPTIONS</code>）中包含<code>Access-Control-Request-Headers</code>时，服务器必须设置该字段配置</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Credentials</code></td>\n<td>表示是否允许发送Cookie，只有一个可选值：true（必为小写）。<br />如果不发送cookie，则直接省略，不写为false</td>\n<td>F</td>\n<td align=\"left\">CORS请求默认不发送<code>Cookie</code>和HTTP认证信息<br />要携带这些信息，需要发送方和服务器配置<br />服务器配置：<br />- <code>Access-Control-Allow-Credentials</code>为<code>true</code><br />- <code>Access-Control-Allow-Origin</code>不能为<code>*</code>，必须指定域名<br />发送方（JS）:<br/>开发者必须在AJAX请求中打开<code>withCredentials</code>属性</td>\n</tr>\n<tr>\n<td><code>Access-Control-Max-Age</code></td>\n<td>以秒为单位的缓存时间在有效时间内，<br />浏览器无须为同一请求再次发起预检请求</td>\n<td>F</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>在Nginx中的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">location</span> <span class=\"hljs-string\">/</span> &#123;  <br>    <span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Origin</span> <span class=\"hljs-string\">*;</span><br>    <span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Methods</span> <span class=\"hljs-string\">&#x27;GET, POST, OPTIONS&#x27;</span><span class=\"hljs-string\">;</span><br>    <span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Headers</span> <span class=\"hljs-string\">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span><span class=\"hljs-string\">;</span><br>\t\t<span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Credentials</span> <span class=\"hljs-string\">&#x27;true&#x27;</span><span class=\"hljs-string\">;</span><br>\t\t<span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Max-Age</span> <span class=\"hljs-number\">86400</span><span class=\"hljs-string\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"CORS的判定流程\"><a href=\"#CORS的判定流程\" class=\"headerlink\" title=\"CORS的判定流程\"></a>CORS的判定流程</h2><p>CORS基本判定流程如图所示，主要分为三个阶段：</p>\n<ol>\n<li><strong>浏览器发起请求</strong>：处理请求头，增加<code>Origin</code>字段</li>\n<li><strong>服务器处理请求，并返回响应</strong>：服务器接收请求，根据当前服务器的CORS配置决定是否在响应头中写入<code>Access-Control-Allow-Origin</code>，并返回正常HTTP响应（注意，因为这里无论是否接收跨域请求，服务器都会返回一个正常HTTP响应，所以无法通过状态码来判断跨域请求是否成功）：<ol>\n<li>服务器已配置CORS，写入该字段</li>\n<li>服务器未配置CORS，不写入该字段</li>\n</ol>\n</li>\n<li><strong>浏览器处理响应</strong>：检查响应头是否存在<code>Access-Control-Allow-Origin</code>：<ol>\n<li>存在，服务器不允许跨域，浏览器抛出错误，错误类型为：<code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></li>\n<li>不存在，浏览器进一步比对该值是否包含当前域的值：<ol>\n<li>包含，服务器同意该源的跨域请求，浏览器正常返回响应</li>\n<li>不包含，服务器允许跨域请求，但拒绝当前源的请求，浏览器抛出错误，错误类型为：<code>The &#39;Access-Control-Allow-Origin&#39; header has a value &#39;[http://xxx.com](http://xxx.com/)&#39; that is not equal to the supplied origin.</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"3.png\" alt=\"CORS判定流程图\"></p>\n<p>在这三个阶段中，根据<strong>请求类型（</strong>简单请求 / 非简单请求）的不同，具体的流程处理和操作也会不一致。</p>\n<h2 id=\"简单请求和非简单请求\"><a href=\"#简单请求和非简单请求\" class=\"headerlink\" title=\"简单请求和非简单请求\"></a>简单请求和非简单请求</h2><p>什么是简单请求和非简单请求呢？实际上这个可以理解为根据当前请求的信息载量来进行区分的。对于信息载量较少的就是简单请求，信息载量多的就是非简单请求。对于这两种请求类型，有明确的定义。</p>\n<h3 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h3><ol>\n<li>使用 <code>GET、POST、HEAD</code> 其中一种请求方法。</li>\n<li>HTTP的头信息不超出以下几种字段：</li>\n</ol>\n<ul>\n<li><code>Accept</code></li>\n<li><code>Accept-Language</code></li>\n<li><code>Content-Language</code></li>\n<li><code>Last-Event-ID</code></li>\n<li><code>Content-Type</code>：只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code><ul>\n<li>这三个值也是直接用表单提交可以设置的值</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><code>XMLHttpRequestUpload</code>：<ol>\n<li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；</li>\n<li><code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。 </li>\n</ol>\n</li>\n<li>请求中没有使用 <code>ReadableStream</code> 对象。</li>\n</ol>\n<p>对于简单请求类型，整个CORS流程没什么变化（如上图一致），浏览器在第一阶段处理请求时，会直接在当前请求的请求头中增加<code>Origin</code>字段然后发送给服务器。</p>\n<p><img src=\"1.png\" alt=\"简单请求流程图示\"></p>\n<h3 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h3><p>除了简单请求，其他的都是非简单请求。</p>\n<p>非简单请求的流程有所不同。对于非简单请求，浏览器会在正式通信之前，增加一次HTTP查询请求，称为“预检“请求（preflight）。只有通过了预检请求，浏览器才会发出正式通信。这里预检请求的方法是<code>OPTIONS</code> 。一次非简单请求的流程如下：</p>\n<ul>\n<li>浏览器发起<code>OPTIONS</code>请求：当浏览器发现当前的请求是非简单请求，会先发起<code>OPTIONS</code> 请求。在<code>OPTIONS</code>的请求头中增加3个字段：<ul>\n<li><code>Origin</code></li>\n<li><code>Access-Control-Request-Method</code>：列出浏览器的<strong>正式请求</strong>中会用到的HTTP方法。</li>\n<li><code>Access-Control-Request-Headers</code>：指定浏览器的<strong>正式请求</strong>中会额外需要发送哪些头信息字段。</li>\n</ul>\n</li>\n<li>服务器接收<code>OPTIONS</code>请求，返回响应：服务器收到请求后，会检查服务器的CORS配置和请求头中CORS字段，决定如何返回响应：<ul>\n<li>服务器<strong>未配置CORS接口 or</strong> 服务器配置的CORS接口和请求头中的<strong>CORS字段不匹配</strong>：服务器<strong>否定</strong>此次预检请求，返回正常的HTTP响应，响应头中不包含CORS相关字段<code>（未配置 || 不匹配 ⇒ 否定：不包含）</code>。</li>\n<li>服务器<strong>已配置 and</strong> 配置的CORS接口和请求头的<strong>CORS字段匹配</strong>：服务器<strong>肯定</strong>此次预检请求，返回正常的HTTP响应，响应头中包含CORS相关字段<code>（配置 &amp;&amp; 匹配 ⇒ 肯定：包含）</code>；</li>\n</ul>\n</li>\n<li>浏览器处理响应：当浏览器接收到服务器的响应之后，检查响应头是否包含CORS相关字段：<ul>\n<li>不包含，浏览器抛出错误</li>\n<li>包含，服务器肯定此次预检请求，浏览器发出正式的<code>CORS</code>请求获取数据，这个正式的CORS请求的流程和简单请求一致。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"2.png\" alt=\"非简单请求流程图示\"></p>\n<p>下面列出了CORS请求中会用到的协议头字段以及说明：</p>\n<table>\n<thead>\n<tr>\n<th>协议头参数</th>\n<th>类型</th>\n<th>说明</th>\n<th>是否必须</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Origin</code></td>\n<td>请求头</td>\n<td>该字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。</td>\n<td>T</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Request-Method</code></td>\n<td>请求头</td>\n<td>该字段用于预检请求，指名浏览器正式的CORS请求会用到的HTTP方法</td>\n<td>T</td>\n<td>发送预检请求时，必须包含</td>\n</tr>\n<tr>\n<td><code>Access-Control-Request-Headers</code></td>\n<td>请求头</td>\n<td>该字段用于预检请求，指名浏览器正式的CORS请求会额外发送的头信息字段</td>\n<td>T</td>\n<td>发送预检请求时，必须包含</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Origin</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>T</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Expose-Headers</code></td>\n<td>响应头</td>\n<td>该字段指明服务器允许哪些响应头可以暴露给浏览器中运行的脚本（JS），以响应跨源请求。<br />在没有额外指明的情况下，CORS请求时，XMLHttpRequest对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<br /><code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。<br/>如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</td>\n<td>F</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>T</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>F</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Credentials</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>F</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Max-Age</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>F</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP 的原理就是利用 <code>&lt;script&gt;</code> 标签的 src 属性没有跨域的限制，通过指向一个需要访问的地址，由服务端返回一个预先定义好的 Javascript 函数的调用，并且将服务器数据以该函数参数的形式传递过来，此方法需要前后端配合完成。</p>\n<ul>\n<li><code>script</code>标签 src可跨域</li>\n<li>将回调方法作为get参数传给后端</li>\n<li>后端返回一个js，调用这个回调，并把数据传给回调</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//定义获取数据的回调方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;<br><br><span class=\"hljs-comment\">// 创建一个script标签，并且告诉后端回调函数名叫 getData</span><br><span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;body&#x27;</span>)[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">gerElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>);<br>script.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/javasctipt&#x27;</span>;<br>script.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">&#x27;demo.js?callback=getData&#x27;</span>;<br>body.<span class=\"hljs-title function_\">appendChild</span>(script);<br><br><span class=\"hljs-comment\">//script 加载完毕之后从页面中删除,否则每次点击生成许多script标签</span><br>script.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"服务器代理\"><a href=\"#服务器代理\" class=\"headerlink\" title=\"服务器代理\"></a>服务器代理</h2><p>浏览器对网络请求做了处理，所以通过从浏览器端发送的请求都会有跨域限制，但是服务器请求服务器就不存在这个问题。所以可以搭建一个代理服务器，将前端资源和代理服务器部署到一个域下，然后前端请求代理服务器，再通过代理服务器转发请求，从而实现请求跨域。</p>\n<h2 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h2><p>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</p>\n<p>只需要给两个页面都添加 <code>document.domain = &#39;test.com&#39;</code>，通过在 <code>a.test.com</code> 创建一个 <code>iframe</code>，去控制 <code>iframe</code> 的 <code>window</code>，从而进行交互。</p>\n<h2 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h2><p>window.postMessage 是一个 HTML5 的 api，允许两个窗口之间进行跨域发送消息。</p>\n<p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 发送消息端</span><br><span class=\"hljs-keyword\">var</span> receiver = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;receiver&#x27;</span>).<span class=\"hljs-property\">contentWindow</span>;<br><span class=\"hljs-keyword\">var</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;send&#x27;</span>);<br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) &#123;<br>    e.<span class=\"hljs-title function_\">preventDefault</span>();<br>    <span class=\"hljs-keyword\">var</span> val = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;text&#x27;</span>).<span class=\"hljs-property\">value</span>;<br>    receiver.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">&quot;Hello &quot;</span>+val+<span class=\"hljs-string\">&quot;！&quot;</span>, <span class=\"hljs-string\">&quot;http://res.42du.cn&quot;</span>);<br>&#125;); <br><br><span class=\"hljs-comment\">// 接收消息端</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;message&quot;</span>, receiveMessage, <span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">receiveMessage</span>(<span class=\"hljs-params\">event</span>)&#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">origin</span> !== <span class=\"hljs-string\">&quot;http://www.42du.cn&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"需要跨域请求的情况\"><a href=\"#需要跨域请求的情况\" class=\"headerlink\" title=\"需要跨域请求的情况\"></a>需要跨域请求的情况</h1><ul>\n<li>由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> 或者 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch</a> 发起的跨源 HTTP 请求。</li>\n<li>Web 字体 (CSS 中通过<code>@font-face</code>使用跨源字体资源)，<a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 贴图</a></li>\n<li>使用 <code>drawImage</code> 将 <code>Images/video</code> 画面绘制到 <code>canvas</code></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.im/post/6844903816060469262\">彻底理解浏览器的跨域</a><br><a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">跨域资源共享 CORS 详解</a><br><a href=\"https://segmentfault.com/a/1190000004322487\">你真的会使用XMLHttpRequest吗？</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">跨源资源共享（CORS）</a><br><a href=\"https://juejin.cn/post/6844903767226351623\">九种跨域方式实现原理（完整版）</a></p>\n","site":{"data":{"languages/zh-CN":{"name":"简体中文","home":{"menu":"首页","title":"首页"},"archive":{"menu":"归档","title":"归档","subtitle":"归档","post_total":"共计 %d 篇文章"},"category":{"menu":"分类","title":"分类","subtitle":"分类","post_total":"共计 %d 篇文章","more":"More..."},"tag":{"menu":"标签","title":"标签","subtitle":"标签","post_total":"共计 %d 篇文章"},"about":{"menu":"关于","title":"关于","subtitle":"关于"},"links":{"menu":"友链","title":"友链","subtitle":"友情链接"},"page404":{"menu":"页面不存在","title":"页面不存在","subtitle":"页面不存在"},"post":{"toc":"目录","prev_post":"上一篇","next_post":"下一篇","updated":"本文最后更新于：%s","meta":{"wordcount":"%s 字","min2read":"%s 分钟","views":"{} 次"},"copyright":{"author":"作者","posted":"发布于","updated":"更新于","licensed":"许可协议","CC":"CC - 知识共享许可协议","BY":"BY - 署名","SA":"SA - 相同方式共享","NC":"NC - 非商业性使用","ND":"ND - 禁止演绎"}},"footer":{"pv":"总访问量 {} 次","uv":"总访客数 {} 人"},"search":{"title":"搜索","keyword":"关键词"},"noscript_warning":"博客在允许 JavaScript 运行的环境下浏览效果更佳"}}},"excerpt":"","more":"<h1 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h1><h2 id=\"什么是同源策略\"><a href=\"#什么是同源策略\" class=\"headerlink\" title=\"什么是同源策略\"></a>什么是同源策略</h2><p>同源策略是一个重要的<strong>安全策略</strong>，它用于<strong>限制</strong>一个源（origin）的文档或者它加载的脚本如何能与另一个源的资源进行<strong>交互</strong>。非同源下的文档和脚本（JS），不能跨域获取资源。</p>\n<p>其中<strong>同源</strong>是指：</p>\n<ul>\n<li>协议相同</li>\n<li>域名相同</li>\n<li>端口相同</li>\n</ul>\n<h2 id=\"为什么会存在同源策略\"><a href=\"#为什么会存在同源策略\" class=\"headerlink\" title=\"为什么会存在同源策略\"></a>为什么会存在同源策略</h2><p>同源策略是<strong>浏览器</strong>为了<strong>保护用户信息安全</strong>所执行的策略。1995年由 Netscape 公司引入的，目前所有的<strong>浏览器</strong>都执行这个策略。</p>\n<p>因为它的主要目的是为了保证用户信息安全，所以只要涉及到用户信息的获取途径都会被<strong>限制</strong>，这些信息获取途径包括：</p>\n<ul>\n<li>通过操作<strong>其他网站</strong>或者 <strong>iframe</strong>的 <code>dom</code> 来获取用户的表单数据</li>\n<li>通过获取<code>cookie</code>，<code>localstorge</code>，<code>sessionstorage</code>，<code>indexDB</code>等缓存信息，来获取用户信息</li>\n<li>通过发送 <code>ajax / fetch</code> 请求，来获取后端的用户信息（提交表单不受跨域限制）</li>\n</ul>\n<p>如果不对这些途径加以限制，就可能被恶意网站盗取用户信息。那么恶意是如何通过这几种途径获取信息的呢？举几个案例（来源于<a href=\"https://juejin.im/post/6844903816060469262\">彻底理解浏览器的跨域</a>）：</p>\n<blockquote>\n<p>案例：<br>一、cookie获取发送请求<br>A 网站是一家银行，用户登录以后，A 网站在用户的机器上设置了一个 Cookie，包含了一些隐私信息（比如存款总额）。用户离开 A 网站以后，又去访问 B 网站，如果没有同源限制，B 网站可以读取 A 网站的 Cookie，那么隐私信息就会泄漏。更可怕的是，Cookie 往往用来保存用户的登录状态，如果用户没有退出登录，其他网站就可以冒充用户，为所欲为。因为浏览器同时还规定，提交表单不受同源政策的限制。<br>例如</p>\n<ol>\n<li>用户登录了自己的银行页面 <a href=\"http://mybank.com/\">http://mybank.com</a>，<a href=\"https://www.notion.so/b4dda8a6ca0b4a308ed8dd5d5f77861a\">mybank.com</a> 向用户的cookie中添加用户标识。</li>\n<li>用户浏览了恶意页面 <a href=\"http://evil.com/\">evil.com</a>。执行了页面中的恶意AJAX请求代码。</li>\n<li>向<a href=\"http://mybank.com发起ajax/\">http://mybank.com发起AJAX</a> HTTP请求，请求会默认把<a href=\"http://mybank.com对应cookie也同时发送过去./\">http://mybank.com对应cookie也同时发送过去。</a></li>\n<li>银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。</li>\n<li>而且由于Ajax在后台执行，用户无法感知这一过程。</li>\n</ol>\n<p>二、dom操作</p>\n<ol>\n<li>做一个假网站，里面用iframe嵌套一个银行网站 <a href=\"http://mybank.com/\">mybank.com</a>。</li>\n<li>把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li>\n<li>这时如果用户输入账号密码，我们的主网站可以跨域访问到<a href=\"http://mybank.com的dom节点,就可以拿到用户的输入了,那么就完成了一次攻击/\">http://mybank.com的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击</a></li>\n</ol>\n</blockquote>\n<p>所以针对这三点，浏览器做了同源限制：</p>\n<ul>\n<li><p>无法获取跨域缓存：<code>cookie</code> <code>localstorge</code> <code>indexDB</code> 等</p>\n</li>\n<li><p>无法访问非同源网页的 DOM （iframe）。</p>\n</li>\n<li><p>无法向非同源地址发送 AJAX 请求 或 Fetch 请求（可以发送，但浏览器拒绝接受响应）。</p>\n</li>\n</ul>\n<p>总结一下：</p>\n<p>同源策略实际就是浏览器为了保证用户信息安全的策略，限制只有同源的文档或者脚本才能进行交互。其中同源是指<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>三点相同。通过限制用户（一般是指开发者）通过操作dom、获取缓存信息以及发送ajax / fetch 请求等方式来获取用户信息来保证用户信息安全。</p>\n<h1 id=\"解决跨域通信\"><a href=\"#解决跨域通信\" class=\"headerlink\" title=\"解决跨域通信\"></a>解决跨域通信</h1><p>我们在开发中，避免不了要跨域获取信息，其中最常见的就是发送跨域请求（<code>ajax / fetch</code>）来获取资源。那么解决跨域通信问题就成了我们的日常。根据浏览器的同源限制，我们将解决跨域通信分为2个方向：</p>\n<ul>\n<li>针对<strong>跨域的网络请求</strong>，需要前后端配合操作来解决，主要方法包括：<ul>\n<li>CORS</li>\n<li>JSONP</li>\n<li>服务器代理</li>\n</ul>\n</li>\n<li>针对DOM级别的操作，我们只需要通过前端解决，主要方法包括：<ul>\n<li><code>postMassage</code>（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）</li>\n<li><code>document.domain</code>（只能用于一、二级域名都相同的情况）</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>通信侧</th>\n<th>方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>前端</td>\n<td><code>postMassage</code>（HTML5 的 api， 允许两个窗口之间进行跨域发送消息）、<br /><code>document.domain</code>（只能用于一、二级域名都相同的情况）</td>\n</tr>\n<tr>\n<td>前后端</td>\n<td><code>CORS</code>、<code>jsonp</code>、服务器代理</td>\n</tr>\n</tbody></table>\n<h2 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h2><p>CORS（<strong>跨域资源共享  Cross-origin resource sharing）</strong>是W3C标准，它允许浏览器向跨域服务器发出请求，解决了<strong>同源限制中AJAX 请求无法跨域</strong>的问题。这种跨域通信解决方案不需要用户做额外的操作，是浏览器和服务器共同实现的。</p>\n<p>在浏览器端，不需要用户额外配置，当用户在浏览器发送AJAX请求（例如在js代码中发起了ajax请求），浏览器会自动处理HTTP请求，同时会对服务器端返回的响应进行拦截处理，判断该响应是否同源，进而决定是返回正常的响应还是抛出错误。</p>\n<p>而服务器则需要手动配置CORS接口，实现对跨域请求的处理。常用的<strong>服务器CORS配置字段</strong>如下：</p>\n<table>\n<thead>\n<tr>\n<th>协议头参数</th>\n<th>说明</th>\n<th>是否必须</th>\n<th align=\"left\">备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Access-Control-Allow-Origin</code></td>\n<td>表示允许跨域请求的域 值为：<br />- 通配符<code>*</code>：接受任何域的跨域访问<br /><code>&lt;origin&gt;</code>：指定一个来源（只能指定一个）<br /><code>null</code> ：指定来源为 <code>null</code> <br />此时实际上就是不接受跨域，但是不推荐设置为该值。<br />因为浏览器在进行<code>CORS</code>判定时只会判断<code>Access-Control-Allow-Origin</code>字段是否存在而不会判断该字段的值，所以设置为<code>null</code>会导致安全问题</td>\n<td>T</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>服务器允许跨域请求的 <code>http</code> 方法列表</td>\n<td>T</td>\n<td align=\"left\">响应预检请求时，必须包含</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>列出了服务器支持的所有头信息字段，<br />这些字段可以用于预检请求的<code>Access-Control-Request-Headers</code></td>\n<td>F</td>\n<td align=\"left\">当预请求（<code>OPTIONS</code>）中包含<code>Access-Control-Request-Headers</code>时，服务器必须设置该字段配置</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Credentials</code></td>\n<td>表示是否允许发送Cookie，只有一个可选值：true（必为小写）。<br />如果不发送cookie，则直接省略，不写为false</td>\n<td>F</td>\n<td align=\"left\">CORS请求默认不发送<code>Cookie</code>和HTTP认证信息<br />要携带这些信息，需要发送方和服务器配置<br />服务器配置：<br />- <code>Access-Control-Allow-Credentials</code>为<code>true</code><br />- <code>Access-Control-Allow-Origin</code>不能为<code>*</code>，必须指定域名<br />发送方（JS）:<br/>开发者必须在AJAX请求中打开<code>withCredentials</code>属性</td>\n</tr>\n<tr>\n<td><code>Access-Control-Max-Age</code></td>\n<td>以秒为单位的缓存时间在有效时间内，<br />浏览器无须为同一请求再次发起预检请求</td>\n<td>F</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>在Nginx中的配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">location</span> <span class=\"hljs-string\">/</span> &#123;  <br>    <span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Origin</span> <span class=\"hljs-string\">*;</span><br>    <span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Methods</span> <span class=\"hljs-string\">&#x27;GET, POST, OPTIONS&#x27;</span><span class=\"hljs-string\">;</span><br>    <span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Headers</span> <span class=\"hljs-string\">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span><span class=\"hljs-string\">;</span><br>\t\t<span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Allow-Credentials</span> <span class=\"hljs-string\">&#x27;true&#x27;</span><span class=\"hljs-string\">;</span><br>\t\t<span class=\"hljs-string\">add_header</span> <span class=\"hljs-string\">Access-Control-Max-Age</span> <span class=\"hljs-number\">86400</span><span class=\"hljs-string\">;</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"CORS的判定流程\"><a href=\"#CORS的判定流程\" class=\"headerlink\" title=\"CORS的判定流程\"></a>CORS的判定流程</h2><p>CORS基本判定流程如图所示，主要分为三个阶段：</p>\n<ol>\n<li><strong>浏览器发起请求</strong>：处理请求头，增加<code>Origin</code>字段</li>\n<li><strong>服务器处理请求，并返回响应</strong>：服务器接收请求，根据当前服务器的CORS配置决定是否在响应头中写入<code>Access-Control-Allow-Origin</code>，并返回正常HTTP响应（注意，因为这里无论是否接收跨域请求，服务器都会返回一个正常HTTP响应，所以无法通过状态码来判断跨域请求是否成功）：<ol>\n<li>服务器已配置CORS，写入该字段</li>\n<li>服务器未配置CORS，不写入该字段</li>\n</ol>\n</li>\n<li><strong>浏览器处理响应</strong>：检查响应头是否存在<code>Access-Control-Allow-Origin</code>：<ol>\n<li>存在，服务器不允许跨域，浏览器抛出错误，错误类型为：<code>No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.</code></li>\n<li>不存在，浏览器进一步比对该值是否包含当前域的值：<ol>\n<li>包含，服务器同意该源的跨域请求，浏览器正常返回响应</li>\n<li>不包含，服务器允许跨域请求，但拒绝当前源的请求，浏览器抛出错误，错误类型为：<code>The &#39;Access-Control-Allow-Origin&#39; header has a value &#39;[http://xxx.com](http://xxx.com/)&#39; that is not equal to the supplied origin.</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"3.png\" alt=\"CORS判定流程图\"></p>\n<p>在这三个阶段中，根据<strong>请求类型（</strong>简单请求 / 非简单请求）的不同，具体的流程处理和操作也会不一致。</p>\n<h2 id=\"简单请求和非简单请求\"><a href=\"#简单请求和非简单请求\" class=\"headerlink\" title=\"简单请求和非简单请求\"></a>简单请求和非简单请求</h2><p>什么是简单请求和非简单请求呢？实际上这个可以理解为根据当前请求的信息载量来进行区分的。对于信息载量较少的就是简单请求，信息载量多的就是非简单请求。对于这两种请求类型，有明确的定义。</p>\n<h3 id=\"简单请求\"><a href=\"#简单请求\" class=\"headerlink\" title=\"简单请求\"></a>简单请求</h3><ol>\n<li>使用 <code>GET、POST、HEAD</code> 其中一种请求方法。</li>\n<li>HTTP的头信息不超出以下几种字段：</li>\n</ol>\n<ul>\n<li><code>Accept</code></li>\n<li><code>Accept-Language</code></li>\n<li><code>Content-Language</code></li>\n<li><code>Last-Event-ID</code></li>\n<li><code>Content-Type</code>：只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code><ul>\n<li>这三个值也是直接用表单提交可以设置的值</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><code>XMLHttpRequestUpload</code>：<ol>\n<li>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；</li>\n<li><code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。 </li>\n</ol>\n</li>\n<li>请求中没有使用 <code>ReadableStream</code> 对象。</li>\n</ol>\n<p>对于简单请求类型，整个CORS流程没什么变化（如上图一致），浏览器在第一阶段处理请求时，会直接在当前请求的请求头中增加<code>Origin</code>字段然后发送给服务器。</p>\n<p><img src=\"1.png\" alt=\"简单请求流程图示\"></p>\n<h3 id=\"非简单请求\"><a href=\"#非简单请求\" class=\"headerlink\" title=\"非简单请求\"></a>非简单请求</h3><p>除了简单请求，其他的都是非简单请求。</p>\n<p>非简单请求的流程有所不同。对于非简单请求，浏览器会在正式通信之前，增加一次HTTP查询请求，称为“预检“请求（preflight）。只有通过了预检请求，浏览器才会发出正式通信。这里预检请求的方法是<code>OPTIONS</code> 。一次非简单请求的流程如下：</p>\n<ul>\n<li>浏览器发起<code>OPTIONS</code>请求：当浏览器发现当前的请求是非简单请求，会先发起<code>OPTIONS</code> 请求。在<code>OPTIONS</code>的请求头中增加3个字段：<ul>\n<li><code>Origin</code></li>\n<li><code>Access-Control-Request-Method</code>：列出浏览器的<strong>正式请求</strong>中会用到的HTTP方法。</li>\n<li><code>Access-Control-Request-Headers</code>：指定浏览器的<strong>正式请求</strong>中会额外需要发送哪些头信息字段。</li>\n</ul>\n</li>\n<li>服务器接收<code>OPTIONS</code>请求，返回响应：服务器收到请求后，会检查服务器的CORS配置和请求头中CORS字段，决定如何返回响应：<ul>\n<li>服务器<strong>未配置CORS接口 or</strong> 服务器配置的CORS接口和请求头中的<strong>CORS字段不匹配</strong>：服务器<strong>否定</strong>此次预检请求，返回正常的HTTP响应，响应头中不包含CORS相关字段<code>（未配置 || 不匹配 ⇒ 否定：不包含）</code>。</li>\n<li>服务器<strong>已配置 and</strong> 配置的CORS接口和请求头的<strong>CORS字段匹配</strong>：服务器<strong>肯定</strong>此次预检请求，返回正常的HTTP响应，响应头中包含CORS相关字段<code>（配置 &amp;&amp; 匹配 ⇒ 肯定：包含）</code>；</li>\n</ul>\n</li>\n<li>浏览器处理响应：当浏览器接收到服务器的响应之后，检查响应头是否包含CORS相关字段：<ul>\n<li>不包含，浏览器抛出错误</li>\n<li>包含，服务器肯定此次预检请求，浏览器发出正式的<code>CORS</code>请求获取数据，这个正式的CORS请求的流程和简单请求一致。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"2.png\" alt=\"非简单请求流程图示\"></p>\n<p>下面列出了CORS请求中会用到的协议头字段以及说明：</p>\n<table>\n<thead>\n<tr>\n<th>协议头参数</th>\n<th>类型</th>\n<th>说明</th>\n<th>是否必须</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>Origin</code></td>\n<td>请求头</td>\n<td>该字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。</td>\n<td>T</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Request-Method</code></td>\n<td>请求头</td>\n<td>该字段用于预检请求，指名浏览器正式的CORS请求会用到的HTTP方法</td>\n<td>T</td>\n<td>发送预检请求时，必须包含</td>\n</tr>\n<tr>\n<td><code>Access-Control-Request-Headers</code></td>\n<td>请求头</td>\n<td>该字段用于预检请求，指名浏览器正式的CORS请求会额外发送的头信息字段</td>\n<td>T</td>\n<td>发送预检请求时，必须包含</td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Origin</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>T</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Expose-Headers</code></td>\n<td>响应头</td>\n<td>该字段指明服务器允许哪些响应头可以暴露给浏览器中运行的脚本（JS），以响应跨源请求。<br />在没有额外指明的情况下，CORS请求时，XMLHttpRequest对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<br /><code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。<br/>如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</td>\n<td>F</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Methods</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>T</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Headers</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>F</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Allow-Credentials</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>F</td>\n<td></td>\n</tr>\n<tr>\n<td><code>Access-Control-Max-Age</code></td>\n<td>响应头</td>\n<td>（同服务器配置字段含义）</td>\n<td>F</td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP 的原理就是利用 <code>&lt;script&gt;</code> 标签的 src 属性没有跨域的限制，通过指向一个需要访问的地址，由服务端返回一个预先定义好的 Javascript 函数的调用，并且将服务器数据以该函数参数的形式传递过来，此方法需要前后端配合完成。</p>\n<ul>\n<li><code>script</code>标签 src可跨域</li>\n<li>将回调方法作为get参数传给后端</li>\n<li>后端返回一个js，调用这个回调，并把数据传给回调</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">//定义获取数据的回调方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\">data</span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);<br>&#125;<br><br><span class=\"hljs-comment\">// 创建一个script标签，并且告诉后端回调函数名叫 getData</span><br><span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;body&#x27;</span>)[<span class=\"hljs-number\">0</span>];<br><span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">gerElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>);<br>script.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/javasctipt&#x27;</span>;<br>script.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">&#x27;demo.js?callback=getData&#x27;</span>;<br>body.<span class=\"hljs-title function_\">appendChild</span>(script);<br><br><span class=\"hljs-comment\">//script 加载完毕之后从页面中删除,否则每次点击生成许多script标签</span><br>script.<span class=\"hljs-property\">onload</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"服务器代理\"><a href=\"#服务器代理\" class=\"headerlink\" title=\"服务器代理\"></a>服务器代理</h2><p>浏览器对网络请求做了处理，所以通过从浏览器端发送的请求都会有跨域限制，但是服务器请求服务器就不存在这个问题。所以可以搭建一个代理服务器，将前端资源和代理服务器部署到一个域下，然后前端请求代理服务器，再通过代理服务器转发请求，从而实现请求跨域。</p>\n<h2 id=\"document-domain\"><a href=\"#document-domain\" class=\"headerlink\" title=\"document.domain\"></a>document.domain</h2><p>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式。</p>\n<p>只需要给两个页面都添加 <code>document.domain = &#39;test.com&#39;</code>，通过在 <code>a.test.com</code> 创建一个 <code>iframe</code>，去控制 <code>iframe</code> 的 <code>window</code>，从而进行交互。</p>\n<h2 id=\"postMessage\"><a href=\"#postMessage\" class=\"headerlink\" title=\"postMessage\"></a>postMessage</h2><p>window.postMessage 是一个 HTML5 的 api，允许两个窗口之间进行跨域发送消息。</p>\n<p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs jsx\"><span class=\"hljs-comment\">// 发送消息端</span><br><span class=\"hljs-keyword\">var</span> receiver = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;receiver&#x27;</span>).<span class=\"hljs-property\">contentWindow</span>;<br><span class=\"hljs-keyword\">var</span> btn = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;send&#x27;</span>);<br>btn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) &#123;<br>    e.<span class=\"hljs-title function_\">preventDefault</span>();<br>    <span class=\"hljs-keyword\">var</span> val = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;text&#x27;</span>).<span class=\"hljs-property\">value</span>;<br>    receiver.<span class=\"hljs-title function_\">postMessage</span>(<span class=\"hljs-string\">&quot;Hello &quot;</span>+val+<span class=\"hljs-string\">&quot;！&quot;</span>, <span class=\"hljs-string\">&quot;http://res.42du.cn&quot;</span>);<br>&#125;); <br><br><span class=\"hljs-comment\">// 接收消息端</span><br><span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;message&quot;</span>, receiveMessage, <span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">receiveMessage</span>(<span class=\"hljs-params\">event</span>)&#123;<br>  <span class=\"hljs-keyword\">if</span> (event.<span class=\"hljs-property\">origin</span> !== <span class=\"hljs-string\">&quot;http://www.42du.cn&quot;</span>)<br>    <span class=\"hljs-keyword\">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"需要跨域请求的情况\"><a href=\"#需要跨域请求的情况\" class=\"headerlink\" title=\"需要跨域请求的情况\"></a>需要跨域请求的情况</h1><ul>\n<li>由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a> 或者 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch</a> 发起的跨源 HTTP 请求。</li>\n<li>Web 字体 (CSS 中通过<code>@font-face</code>使用跨源字体资源)，<a href=\"https://www.w3.org/TR/css-fonts-3/#font-fetching-requirements\">因此，网站就可以发布 TrueType 字体资源，并只允许已授权网站进行跨站调用</a>。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API/Tutorial/Using_textures_in_WebGL\">WebGL 贴图</a></li>\n<li>使用 <code>drawImage</code> 将 <code>Images/video</code> 画面绘制到 <code>canvas</code></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://juejin.im/post/6844903816060469262\">彻底理解浏览器的跨域</a><br><a href=\"https://www.ruanyifeng.com/blog/2016/04/cors.html\">跨域资源共享 CORS 详解</a><br><a href=\"https://segmentfault.com/a/1190000004322487\">你真的会使用XMLHttpRequest吗？</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\">跨源资源共享（CORS）</a><br><a href=\"https://juejin.cn/post/6844903767226351623\">九种跨域方式实现原理（完整版）</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/this指针/5.png","slug":"5.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/7.png","slug":"7.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/this.png","slug":"this.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/2.png","slug":"2.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/4.png","slug":"4.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/3.png","slug":"3.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/8.png","slug":"8.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/this指针/1.png","slug":"1.png","post":"cleo9o0660000c8dffkmyarim","modified":0,"renderable":0},{"_id":"source/_posts/BFC/2.png","slug":"2.png","post":"cleobkvye0000lpdf34wsh6hz","modified":0,"renderable":0},{"_id":"source/_posts/BFC/1.png","slug":"1.png","post":"cleobkvye0000lpdf34wsh6hz","modified":0,"renderable":0},{"_id":"source/_posts/BFC/4.png","slug":"4.png","post":"cleobkvye0000lpdf34wsh6hz","modified":0,"renderable":0},{"_id":"source/_posts/BFC/5.png","slug":"5.png","post":"cleobkvye0000lpdf34wsh6hz","modified":0,"renderable":0},{"_id":"source/_posts/BFC/3.png","slug":"3.png","post":"cleobkvye0000lpdf34wsh6hz","modified":0,"renderable":0},{"_id":"source/_posts/浏览器同源策略/1.png","slug":"1.png","post":"cleobw292000rlpdfb3fl11h6","modified":0,"renderable":0},{"_id":"source/_posts/浏览器同源策略/2.png","slug":"2.png","post":"cleobw292000rlpdfb3fl11h6","modified":0,"renderable":0},{"_id":"source/_posts/浏览器同源策略/3.png","slug":"3.png","post":"cleobw292000rlpdfb3fl11h6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cleo9o0660000c8dffkmyarim","category_id":"cleoaicd10010c8df2try5jqc","_id":"cleoaicd30011c8df8iqs2atp"},{"post_id":"cleo9o0660000c8dffkmyarim","category_id":"cleoaihe80012c8df21166241","_id":"cleoaihe90013c8dfh198gs8l"},{"post_id":"cleobkvye0000lpdf34wsh6hz","category_id":"cleoaicd10010c8df2try5jqc","_id":"cleobmcdv000glpdfepgb68u1"},{"post_id":"cleobkvye0000lpdf34wsh6hz","category_id":"cleobm4900004lpdf6ll2d4mc","_id":"cleobmcdv000hlpdfh1on5osb"},{"post_id":"cleobw292000rlpdfb3fl11h6","category_id":"cleobxzf1000ylpdf40fs0irk","_id":"cleobxzf2000zlpdfe6dmg6cc"}],"PostTag":[{"post_id":"cleo9o0660000c8dffkmyarim","tag_id":"cleoa6glo000lc8df9v0d3hyo","_id":"cleoa9nm1000qc8dfh3ja0uj3"},{"post_id":"cleobkvye0000lpdf34wsh6hz","tag_id":"cleobo3wn000plpdfggrk30fd","_id":"cleobo3wp000qlpdf4u81bl1d"},{"post_id":"cleobw292000rlpdfb3fl11h6","tag_id":"cleoc02ub0016lpdfgvr1d9g3","_id":"cleoc02uc0017lpdf9jp31q3s"}],"Tag":[{"name":"this","_id":"cleo9s3d50001c8dfdh4m1ssq"},{"name":"this、","_id":"cleo9yjll0003c8dfdyv7flqt"},{"name":"this 箭头函数","_id":"cleo9yzrt0006c8dfdbmg6nyi"},{"name":"this] 箭头函数","_id":"cleo9z96e0008c8df83jxcazj"},{"name":"this、箭头函数","_id":"cleo9zrqk000ac8dfce8caw5x"},{"name":"<p class=\"note note-primary\">标签</p>","_id":"cleoa0p9e000cc8dfhuzn29or"},{"name":"<span class=\"label label-primary\">Label</span>","_id":"cleoa1umi000ec8df23dse2en"},{"name":"<span class=\"label label-primary\">this</span>","_id":"cleoa5xho000hc8df4vty9zzq"},{"name":"<span class=\"label label-primary\">this</span> <span class=\"label label-primary\">this</span>","_id":"cleoa6dt5000jc8df6g072pg6"},{"name":"<span class=\"label label-primary\">this</span> <span class=\"label label-primary\">箭头函数</span>","_id":"cleoa6glo000lc8df9v0d3hyo"},{"name":"箭头函数","_id":"cleoa906a000oc8df34wy5n0n"},{"name":"<span class=\"label label-primary\">渲染</span>","_id":"cleobnold000jlpdfcw5pbkxr"},{"name":"<span class=\"label label-primary\">渲染</span> <span class=\"label label-primary\">渲染</span>","_id":"cleobnx5h000llpdfdv033ueu"},{"name":"<span class=\"label label-primary\">BFC</span> <span class=\"label label-primary\">渲染</span>","_id":"cleobo1ck000nlpdffqwjacfu"},{"name":"<span class=\"label label-primary\">BFC</span> <span class=\"label label-primary\">CSS渲染</span>","_id":"cleobo3wn000plpdfggrk30fd"},{"name":"浏览器通信","_id":"cleobxhrp000slpdfgq3ugsxq"},{"name":"浏览器安全","_id":"cleobxr7n000ulpdfhr4lg3i8"},{"name":"http","_id":"cleobxr7o000vlpdf8bkx73nc"},{"name":"<span class=\"label label-primary\">BFC</span>","_id":"cleobzez90010lpdfeka78w6n"},{"name":"<span class=\"label label-primary\">浏览器安全</span>","_id":"cleobzmxl0012lpdf1tmpbx4e"},{"name":"<span class=\"label label-primary\">浏览器安全</span> <span class=\"label label-primary\">浏览器安全</span>","_id":"cleobzyin0014lpdfezb0bgh3"},{"name":"<span class=\"label label-primary\">浏览器安全</span> <span class=\"label label-primary\">CORS</span>","_id":"cleoc02ub0016lpdfgvr1d9g3"}]}}